<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java代码</title>
      <link href="/2023/08/27/Java%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/08/27/Java%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h1><ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Docker：1.13.1 (当前版本:1.22.1)</li><li>JDK: 8</li></ul></li></ul></li><li><p>拉取nexus镜像</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"redisProperties"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RedisProperties redisProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LettuceConnectionFactory <span class="token function">lettuceConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        GenericObjectPoolConfig genericObjectPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getLettuce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getLettuce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getLettuce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWait</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getLettuce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList <span class="token operator">=</span> redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>RedisNode<span class="token operator">></span> listNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String node <span class="token operator">:</span> nodeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> ipAndPort <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RedisNode redisNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisNode</span><span class="token punctuation">(</span>ipAndPort<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ipAndPort<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>redisNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        RedisClusterConfiguration redisClusterConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisClusterConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisClusterConfiguration<span class="token punctuation">.</span><span class="token function">setClusterNodes</span><span class="token punctuation">(</span>listNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisClusterConfiguration<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisClusterConfiguration<span class="token punctuation">.</span><span class="token function">setMaxRedirects</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxRedirects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置集群自动刷新拓扑</span>        ClusterTopologyRefreshOptions topologyRefreshOptions <span class="token operator">=</span> ClusterTopologyRefreshOptions<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">enablePeriodicRefresh</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getLettuce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//按照周期刷新拓扑</span>                <span class="token punctuation">.</span><span class="token function">enableAllAdaptiveRefreshTriggers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//根据事件刷新拓扑</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClusterClientOptions clusterClientOptions <span class="token operator">=</span> ClusterClientOptions<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//redis命令超时时间,超时后才会使用新的拓扑信息重新建立连接</span>                <span class="token punctuation">.</span><span class="token function">timeoutOptions</span><span class="token punctuation">(</span>TimeoutOptions<span class="token punctuation">.</span><span class="token function">enabled</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">topologyRefreshOptions</span><span class="token punctuation">(</span>topologyRefreshOptions<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LettuceClientConfiguration clientConfig <span class="token operator">=</span> LettucePoolingClientConfiguration<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">commandTimeout</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">poolConfig</span><span class="token punctuation">(</span>genericObjectPoolConfig<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">readFrom</span><span class="token punctuation">(</span>ReadFrom<span class="token punctuation">.</span>REPLICA_PREFERRED<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 优先从副本读取</span>                <span class="token punctuation">.</span><span class="token function">clientOptions</span><span class="token punctuation">(</span>clusterClientOptions<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LettuceConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span>redisClusterConfiguration<span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div class="bilibili">   <iframe src="//player.bilibili.com/player.html?aid=81148317&amp;cid=138878361&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe></div></li></ol><ol start="2"><li><p>运行nexus镜像</p><ul><li><ul><li>目测成功哈哈<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul></li></ul><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding:3px 3px"> 「參考文獻」<a style="color:#37f;" href="https://www.jianshu.com/p/dd586990fcb0" target="_blank">https://www.jianshu.com/p/dd586990fcb0</a><br>    「参考文献」<a style="color:#37f;" href="https://hub.docker.com/r/sonatype/nexus3#running" target="_blank">https://hub.docker.com/r/sonatype/nexus3#running</a><br> 「参考文献」<a style="color:#37f;" href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank">https://docs.docker.com/engine/reference/commandline/cli/</a><br></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境搭建Redis集群</title>
      <link href="/2023/08/26/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4/"/>
      <url>/2023/08/26/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Docker &gt;= 24.0.4+</li></ul></li></ul></li><li><p><strong><font color="#4360DB">环境安装</font></strong></p><ul><li><p>2.1 <font color="#ABE338">下载Redis镜像</font></p><ul><li><p>2.1.1 搜索镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;docker&nbsp;search&nbsp;docker.io/redis:latest&nbsp;</font><font color="#3300BB"></font>&nbsp;<br></div></li><li><p>2.1.2 拉取镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;docker pull</font><font color="#3300BB">&nbsp;redis&nbsp;</font>&nbsp;<br></div></li><li><p>2.1.3 创建容器网络</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;docker network create</font><font color="#3300BB"></font>&nbsp;redis<br></div></li><li><p>2.1.4 创建容器网络</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;docker network ls</font><font color="#3300BB"></font>&nbsp;<br></div></li><li><p>2.1.5 查看容器网络信息</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;docker</font><font color="#3300BB">&nbsp;&nbsp;network&nbsp;</font>&nbsp;inspect redis<br></div></li><li><p>2.1.6 补充</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;docker</font><font color="#3300BB">&nbsp;&nbsp;</font>network rm redis<br>    <font>[root@www ~]#&nbsp;&nbsp;docker</font><font color="#3300BB">&nbsp;&nbsp;</font>network --help<br></div></li></ul></li><li><p>2.2 <font color="#ABE338">编写Redis配置文件</font></p><ul><li><p>2.2.1 执行初始化Redis环境脚本</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">for</font><font>&nbsp;&nbsp;port</font><font color="#10A1EE">&nbsp;&nbsp;in</font><font color="#00990">&nbsp;$(seq 6379 6384)</font><font>;</font><br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">do</font><br>    <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">mkdir&nbsp;</font><font>&nbsp;-p</font><font>&nbsp;&nbsp;/home/redis/node-${port}/conf</font><br>    <font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>touch <font color="#FF4DBB">&nbsp;</font> /home/redis/node-${port}/conf/redis.conf</font><br><font color="#BEBE12">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>cat &nbsp;&lt;&lt; EOF &gt;&gt;&nbsp; <font color="#0000FF">/home/redis/node-${port}/conf/redis.conf</font></font><br><font color="#BEBE12">6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>port<font color="#BEBE12">&nbsp;&nbsp;<font color="#10A1EE">${port}</font></font><br>    <font color="#BEBE12">7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>requirepass</font>&nbsp;&nbsp;1234<br><font color="#BEBE12">8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>bind <font color="#FF4DBB">&nbsp;0.0.0.0</font> </font><br><font color="#BEBE12">9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>protected-mode <font color="#FF4DBB">&nbsp;no</font></font><br>    <font color="#BEBE12">10&nbsp;&nbsp;&nbsp;</font><font>daemonize <font color="#FF4DBB"><font color="#FF4DBB"></font>&nbsp;no</font></font><br><font color="#BEBE12">11&nbsp;&nbsp;&nbsp;</font><font>appendonly <font color="#FF4DBB">yes</font></font><br>    <font color="#BEBE12">12&nbsp;&nbsp;&nbsp;</font><font>cluster-enabled <font color="#BEBE12">&nbsp;yes</font><font color="#FF6060"></font></font><br>    <font color="#BEBE12">13&nbsp;&nbsp;&nbsp;</font><font>cluster-config-file <font color="#BEBE12">&nbsp;nodes.conf</font><font color="#FF6060"></font></font><br>    <font color="#BEBE12">14&nbsp;&nbsp;&nbsp;</font><font>cluster-node-timeout <font color="#BEBE12">&nbsp;5000</font><font color="#FF6060"></font></font><br>    <font color="#BEBE12">15&nbsp;&nbsp;&nbsp;</font><font>cluster-enabled <font color="#BEBE12">&nbsp;yes</font><font color="#FF6060"></font></font><br>    <font color="#BEBE12">16&nbsp;&nbsp;&nbsp;</font><font>cluster-announce-ip <font color="#BEBE12">&nbsp;服务器就填公网ip，或者内部对应容器的ip</font><font color="#FF6060"></font></font><br>    <font color="#BEBE12">17&nbsp;&nbsp;&nbsp;</font><font>cluster-announce-port <font color="#BEBE12">&nbsp;${port}</font><font color="#FF6060"></font></font><br>    <font color="#BEBE12">18&nbsp;&nbsp;&nbsp;</font><font>cluster-announce-bus-port <font color="#BEBE12">&nbsp;1${port}</font><font color="#FF6060"></font></font><br>    <font color="#BEBE12">19&nbsp;&nbsp;&nbsp;</font><font>EOF <font color="#BEBE12">&nbsp;</font><font color="#FF6060"></font></font><br>    <font color="#BEBE12">20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">done</font><br></div><img src="https://i.imgur.com/5WZvXHM.png" alt="2-2-1初始化配置脚本截图" style="zoom:100%;"></li></ul></li><li><p>2.3 <font color="#ABE338">启动Redis容器</font></p><ul><li><p>2.3.1 执行启动容器脚本</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">for</font><font>&nbsp;&nbsp;port</font><font color="#770088">&nbsp;&nbsp;in</font><font color="#00990">&nbsp;$(seq 6379 6384)</font><font>;&nbsp;&nbsp;\</font><br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">do&nbsp;&nbsp;\</font><br><font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;docker&nbsp;<font>&nbsp;run<font>&nbsp;&nbsp;<font color="#0000FF">-it -d -p ${port}:${port} -p </font> <font color="10A1EE">1</font><font color="#0000FF">${port}</font>:1<font color="#0000FF">${port}</font>&nbsp;&nbsp;\</font><br><font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;<font color="#0000FF">--privileged=true -v </font>/home/redis/node-<font color="#0000FF">${port}</font>/conf/redis.conf:/usr/local/etc/redis/redis.conf \&nbsp;</font><br><font color="#BEBE12">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;<font color="#0000FF">--privileged=true -v</font> /home/redis/node-<font color="#0000FF">${port}</font>/data:/data \</font><br><font color="#BEBE12">6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;<font color="#0000FF">--restart</font> always <font color="#0000FF">--name</font> redis-<font color="#0000FF">${port}</font> <font color="#0000FF">--net</font> redis \<br><font color="#BEBE12">7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;<font color="#0000FF">--sysctl</font> net.core.somaxconn=<font color="#00990">1024</font> &nbsp;docker.io/redis:latest&nbsp; redis-server&nbsp; /usr/local/etc/redis/redis.conf</font><br><font color="#BEBE12">9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">done&nbsp;</font><br></div><img src="https://i.imgur.com/IcHtTln.png" alt="2-3-1启动截图" style="zoom:100%;"></li></ul></li><li><p>2.4 <font color="#ABE338">创建Redis Cluster集群</font></p><ul><li><p>2.4.1 任意进入一个节点进入，创建Redis集群。例如：进入redis-6379容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font>&nbsp;&nbsp;docker<font color="#3300BB"><font color="#3300BB">&nbsp;exec</font></font>&nbsp; -it redis-6379 /bin/bash<br></div><img src="https://i.imgur.com/p6LEOcS.png" alt="2-4-1容器截图" style="zoom:100%;"></li><li><p>2.4.2 创建集群</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;redis-cli</font><font color="#3300BB">&nbsp;&nbsp;</font>&nbsp;-a 之前设置的密码 --cluster create 配置文件中的IP地址:6379 IP地址:6380 IP地址:6381 IP地址:6382 IP地址:6383 IP地址:6384 <font color="#3300BB">&nbsp;&nbsp;--cluster-replicas 1</font><br></div><img src="https://i.imgur.com/vm9ZmCg.png" alt="2-4-2创建集群截图" style="zoom:100%;"><p><code>如果遇到以下提示,输入yes</code></p><img src="https://i.imgur.com/dlSFfw7.png" alt="2-4-3确认截图" style="zoom:100%;"><p><code>显示如下图，则证明集群创建成功</code></p><img src="https://i.imgur.com/aw6XR7E.png" alt="2-4-4创建成功截图" style="zoom:100%;"></li><li><p>2.4.3 查看节点相关信息</p><p><code>进入任意容器,连接redis</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">        <font>[root@www ~]#</font>&nbsp;&nbsp;docker<font color="#3300BB"><font color="#3300BB">&nbsp;exec</font></font>&nbsp; -it redis-6379 /bin/bash<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">redis-cli</font>&nbsp;-c&nbsp;-a&nbsp;1234<br></div><p><code>输入cluster info 查看集群信息</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cluster</font>&nbsp;info<br></div><img src="https://i.imgur.com/4ucZ3dO.png" alt="2-4-3确认截图" style="zoom:100%;"><p><code>输入cluster nodes 查看所有节点相关信息</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cluster</font>&nbsp;nodes<br></div><img src="https://i.imgur.com/iThpS1k.png" alt="2-4-3查询节点信息截图" style="zoom:100%;"></li></ul></li></ul></li><li><p><strong><font color="#4360DB">测试环境</font></strong>  </p><ul><li><p>3.1 <font color="#ABE338">本地测试</font></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font>&nbsp;&nbsp;docker<font color="#3300BB"><font color="#3300BB">&nbsp;exec</font></font>&nbsp; -it redis-6379 /bin/bash<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">redis-cli</font>&nbsp;-c&nbsp;-a&nbsp;1234<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">set</font>&nbsp; k1&nbsp;v1<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">get&nbsp;</font> &nbsp;k1<br></div><img src="https://i.imgur.com/n35hHEa.png" alt="3-1-1测试截图" style="zoom:100%;"></li><li><p>3.2 <font color="#ABE338">外网测试</font></p><p><code>使用Redis连接工具 or 用CMD环境连接测试</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>C:\Redis_3.1#&nbsp;&nbsp;</font><font color="#3300BB">redis-cli</font>&nbsp; -c&nbsp;&nbsp;-a&nbsp;1234&nbsp; -h&nbsp; 'redis的ip地址' &nbsp;-p&nbsp; 6379<br>    <font>C:\Redis_3.1#&nbsp;&nbsp;</font><font color="#3300BB">redis-cli</font>&nbsp; -c&nbsp;&nbsp;-a&nbsp; 1234 &nbsp;-h&nbsp; 'redis的ip地址' &nbsp;-p&nbsp; 6380<br>    <font>C:\Redis_3.1#&nbsp;&nbsp;</font><font color="#3300BB">redis-cli</font>&nbsp; -c&nbsp;&nbsp;-a&nbsp; 1234 &nbsp;-h&nbsp; 'redis的ip地址'&nbsp; -p&nbsp; 6381<br>    <font>C:\Redis_3.1#&nbsp;&nbsp;</font><font color="#3300BB">redis-cli</font>&nbsp; -c&nbsp;&nbsp;-a &nbsp;1234&nbsp; -h&nbsp; 'redis的ip地址'&nbsp; -p&nbsp; 6382<br>    <font>C:\Redis_3.1#&nbsp;&nbsp;</font><font color="#3300BB">redis-cli</font>&nbsp; -c&nbsp;&nbsp;-a&nbsp; 1234 &nbsp;-h&nbsp; 'redis的ip地址'&nbsp; -p&nbsp; 6383<br>    <font>C:\Redis_3.1#&nbsp;&nbsp;</font><font color="#3300BB">redis-cli</font>&nbsp; -c&nbsp;&nbsp;-a&nbsp; 1234&nbsp; -h&nbsp; 'redis的ip地址'&nbsp; -p&nbsp; 6384<br></div><p><code>连接成功如下图</code></p><img src="https://i.imgur.com/oaQL8i8.png" alt="3-2-1外网测试截图" style="zoom:100%;"></li></ul></li><li><p><strong><font color="#4360DB">其他</font></strong> </p><ul><li><p>4.1 <font color="#ABE338">常用脚本</font></p><ul><li><p>批量停止容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">for</font><font>&nbsp;&nbsp;port</font><font color="#770088">&nbsp;&nbsp;in</font><font color="#00990">&nbsp;$(seq 6379 6384)</font><font>;&nbsp;&nbsp;</font><br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">do&nbsp;&nbsp;</font><br><font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>docker&nbsp;<font>&nbsp;stop<font>&nbsp;&nbsp;redis-<font color="#0000FF">${port}</font><br><font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">done&nbsp;</font><br></font></font></div></li><font><font></font><li><font><p>批量删除容器</p></font><div style="background:#F2F3F4;padding:10px;font-size:15px;"><font> <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">for</font>    <font>&nbsp;&nbsp;port</font><font color="#770088">&nbsp;&nbsp;in</font><font color="#00990">&nbsp;$(seq 6379 6384)</font><font>;&nbsp;&nbsp;</font><br><font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">do&nbsp;&nbsp;</font><br><font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>docker&nbsp;</font><font>&nbsp;rm<font>&nbsp;&nbsp;redis-<font color="#0000FF">${port}</font><br><font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#770088">done&nbsp;</font><br></font></font></div></li><font><font></font></font></font></ul><font><font><font></font></font></font></li><font><font><font><li><p>4.2 <font color="#ABE338">常见错误</font></p><ul><li><p><strong>一直卡在Waiting for the cluster to join ……</strong></p><p><code>如果是购买的云服务器 ，要记得打开安全组规则， 6379~6384和16379 ~16384都要打开</code></p></li></ul></li></font></font></font></ul><font><font><font></font></font></font></li><font><font><font></font></font></font></ol><font><font><font><p>​       </p></font></font></font>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker搭建ElasticSearch+Kibana+Logstash+Filebeat</title>
      <link href="/2023/08/17/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BAElasticSearch+Kibana+Logstash+Filebeat/"/>
      <url>/2023/08/17/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BAElasticSearch+Kibana+Logstash+Filebeat/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求:<ul><li>ElasticSearch: 7.12.1</li><li>ElasticSearch-Head:6</li><li>Kibana: 7.12.1</li><li>LogStash: 7.12.1</li><li>Filebeat: 7.12.1</li></ul></li></ul></li><li><p><strong><font color="#4360DB">搭建Filebeat</font></strong></p><ul><li><p>2.1 简述</p><p><code>如果没有搭建好，先看一下搭建ELK的文章：</code><a href="https://mantianyy.github.io/2023/06/24/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BAELK7/">基于Docker搭建ELK7</a></p></li><li><p>2.2 修改Logstash.conf配置文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cd</font>&nbsp;&nbsp;/usr/local/elk/logstash/pipeline/<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">vim</font>&nbsp;&nbsp;pipeline.conf<br></div><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>input{<br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>&nbsp;&nbsp;&nbsp;&nbsp;beats{<br>    <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port =&gt; 5044<br><font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>filter&nbsp;{<font color="#FF4DBB"></font></font><br><font color="#BEBE12">7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>mutate&nbsp;{<font color="#FF4DBB"></font></font><br><font color="#BEBE12">8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font> remove_field&nbsp;=&gt;&nbsp;[&nbsp;"host"&nbsp;]<font color="#FF4DBB"></font></font><br><font color="#BEBE12">9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">10&nbsp;&nbsp;&nbsp;</font><font>}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">11&nbsp;&nbsp;</font><font>output{<font color="#FF4DBB"></font></font><br><font color="#BEBE12">12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;elasticsearch{<font color="#FF4DBB"></font></font><br><font color="#BEBE12">13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hosts =&gt; [ "http://127.0.0.1:9200" ]<font color="#FF4DBB"></font></font><br><font color="#BEBE12">14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index =&gt; "springboot-api"<font color="#FF4DBB"></font></font><br><font color="#BEBE12">15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec =&gt; "json"<font color="#FF4DBB"></font></font><br><font color="#BEBE12">16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>stdout{<font color="#FF4DBB"></font></font><br><font color="#BEBE12">18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec =&gt; rubydebug<font color="#FF4DBB"></font></font><br><font color="#BEBE12">19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">20&nbsp;&nbsp;&nbsp;</font><font>}<font color="#FF4DBB"></font></font><br></div></li><li><p>2.3 创建Filebeat环境目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp;&nbsp;-p&nbsp;&nbsp;/var/log/springboot-api/<br></div></li><li><p>2.4 授权Filebeat目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod</font>&nbsp;&nbsp;777&nbsp;&nbsp;/var/log/springboot-api/<br></div></li><li><p>2.5 创建Filebeat配置文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cd</font>&nbsp;&nbsp;/usr/local/elk/filebeat/<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">vim</font>&nbsp;&nbsp;filebeat.yml<br></div><br><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>filebeat.inputs:<br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;type:&nbsp;&nbsp;log<br>    <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paths:<br>    <font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;/var/log/springboot-api/*.log<font color="#FF4DBB"></font></font><br>    <font color="#BEBE12">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>json.keys_under_root:&nbsp;<font color="#FF4DBB">&nbsp;true</font></font><br>    <font color="#BEBE12">6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>json.add_error_key:&nbsp;<font color="#FF4DBB">&nbsp;true</font></font><br>    <font color="#BEBE12">7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>json.message_key:&nbsp;<font color="#FF4DBB">&nbsp;log</font></font><br><br>    <font color="#BEBE12">8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>output.logstash:</font><br>    <font color="#BEBE12">9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;hosts:<font color="#FF4DBB"></font></font>&nbsp;&nbsp;["logstash的ip:5044"]<br>    <font color="#BEBE12">10&nbsp;&nbsp;&nbsp;</font><font>setup.kibana:</font><br>    <font color="#BEBE12">11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;hosts:<font color="#FF4DBB"></font></font>&nbsp;&nbsp;["kibana的ip:5601"]<br></div></li><li><p>2.5 启动容器运行</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name filebeat --net elk &nbsp;&nbsp;\&nbsp;&nbsp;  --privileged=true &nbsp;&nbsp;\&nbsp;&nbsp;  -v /var/log/springboot-api:/var/log/springboot-api:rw &nbsp;&nbsp;\&nbsp;&nbsp;  -v /usr/local/elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro &nbsp;&nbsp;\&nbsp;&nbsp;  -d --name filebeat elastic/filebeat:7.12.1 <br></div></li></ul></li><li><p><strong><font color="#4360DB">配置输出日志格式</font></strong></p><p><code>logback.xml输出的是字符串格式,需要转成JSON格式,因为后面需要根据requestId、level、等字段进行匹配查询数据</code></p><ul><li><p>4.1 创建项目</p><ul><li><p>4.1.1 pom文件依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springboot-log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springboot-log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>springboot-log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.logstash.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logstash-logback-encoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>4.1.2 resources/application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>    <span class="token key atrule">uri-encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token key atrule">threads</span><span class="token punctuation">:</span>      <span class="token key atrule">max</span><span class="token punctuation">:</span> <span class="token number">200</span>      <span class="token key atrule">min-spare</span><span class="token punctuation">:</span> <span class="token number">30</span>    <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> 5000ms  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8088</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /springboot<span class="token punctuation">-</span>log<span class="token key atrule">mvc</span><span class="token punctuation">:</span>  <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>    <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ant_path_matcher<span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>log/logback<span class="token punctuation">-</span>spring.xml</code></pre></li><li><p>4.1.3 resources/log/logback-spring.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/base.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_FILE_PATH<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/var/log/springboot-api<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d [%relative] [%level] [%thread] [%X{requestId}] %logger --> %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--每天记录日志到文件appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILEBEAT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${LOG_FILE_PATH}/springboot-api-%d{yyyy-MM-dd}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                %d [%relative] [%level] [%thread] [%X{requestId}] %logger --> %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net.logstash.logback.encoder.LogstashEncoder<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILEBEAT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>4.4.4 IndexController.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>log<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>MDC<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>IndexController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span> <span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Map <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MDC<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"requestId"</span><span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"测试接口 {}"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"测试接口 error {}"</span><span class="token punctuation">,</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"测试接口 waring {}"</span><span class="token punctuation">,</span><span class="token string">"警告"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>4.2 运行&amp;验证结果</p><img src="https://i.imgur.com/k8LITZ0.png" alt="4-2-1 Logstash数据输出监控" style="zoom:100%;"><img src="https://i.imgur.com/xqK2d2f.png" alt="4-2-2 ES日志查询" style="zoom:100%;"><p>这一步展示没问题，以上环境就算搭建成功了^_^</p></li></ul></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境搭建Jenkins</title>
      <link href="/2023/08/12/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAJenkins/"/>
      <url>/2023/08/12/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAJenkins/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Docker &gt;= 24.0.4+</li><li>Maven &gt;= 3.6.3+</li><li>JDK &gt;=  11+</li><li>Git &gt;= 1.8.3+</li></ul></li></ul></li><li><p><strong><font color="#4360DB">环境安装</font></strong></p><ul><li><p>2.1 安装Docker</p><ul><li><p>2.1.1 更新系统</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;yum update</font><font color="#3300BB">&nbsp;-y&nbsp;</font>&nbsp;<br></div></li><li><p>2.1.2 安装依赖包</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;yum install</font><font color="#3300BB">&nbsp;-y&nbsp;</font>&nbsp;yum-utils device-mapper-persistent-data lvm2<br></div></li><li><p>2.1.3 添加Docker库</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;yum-config-manager</font><font color="#3300BB">&nbsp;--add-repo&nbsp;</font>&nbsp;https://download.docker.com/linux/centos/docker-ce.repo<br></div></li><li><p>2.1.4 安装Docker</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;yum install docker-ce</font><font color="#3300BB"></font>&nbsp;<br></div></li><li><p>2.1.5 启动Docker服务</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;systemctl</font><font color="#3300BB">&nbsp;&nbsp;start&nbsp;</font>&nbsp;docker<br></div></li><li><p>2.1.6 设置开机启动</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;systemctl</font><font color="#3300BB">&nbsp;&nbsp;</font>enable docker<br></div></li></ul></li><li><p>2.2 安装Maven</p><ul><li><p>2.2.1 创建MAVE_HOME目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir -p&nbsp;</font>&nbsp;/usr/local/maven_home<br></div></li><li><p>2.2.2 授权目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod&nbsp;</font>&nbsp;777&nbsp;&nbsp;/usr/local/maven_home<br></div></li><li><p>2.2.3 切换目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;cd</font><font color="#3300BB">&nbsp;&nbsp;/usr/local/maven_home</font>&nbsp;<br></div></li><li><p>2.2.4 下载包</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;wget</font><font color="#3300BB">&nbsp;</font>&nbsp;https://dlcdn.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.zip<br></div></li><li><p>2.2.5 解压包</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;unzip</font><font color="#3300BB">&nbsp;&nbsp;</font>&nbsp;apache-maven-3.9.4-bin.zip<br></div></li><li><p>2.2.6 创建依赖仓库文件夹</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp;&nbsp;/usr/local/maven_home/repo<br></div></li><li><p>2.2.7 配置依赖仓库镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;vim</font><font color="#3300BB">&nbsp;&nbsp;</font>/usr/local/maven_home/apache-maven-3.9.4/conf/settings.xml<br></div><p><code>mirror修改为如下配置</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">&lt;mirror&gt;</font><br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">&lt;id&gt;alimaven&lt;/id&gt;</font><br>    <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</font><br>    <font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">&lt;name&gt;aliyun maven&lt;/name&gt;</font><br>    <font color="#BEBE12">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</font><br>    <font color="#BEBE12">6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">&lt;/mirror&gt;</font><br></div></li><li><p>2.2.8 配置依仓库地址</p><p><code> &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;修改路径为:/usr/local/maven_home/repo</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;vim</font><font color="#3300BB">&nbsp;&nbsp;</font>/usr/local/maven_home/apache-maven-3.9.4/conf/settings.xml<br></div></li><li><p>2.2.6 设置环境变量</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;vim</font><font color="#3300BB">&nbsp;&nbsp;</font>/etc/profile<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#770088">export&nbsp;</font>&nbsp;<font color="#0000FE">MAVEN_HOME=</font>/usr/local/maven_home/apache-maven-3.9.4<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#770088">export&nbsp;</font>&nbsp;<font color="#0000FE">PATH=$PATH:$MAVEN_HOME</font>/bin<br></div></li><li><p>2.2.7 刷新配置</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#770088">source&nbsp;</font>&nbsp;<font color="#0000FE"></font>/ect/profile<br></div></li></ul></li><li><p>2.3 安装JDK</p><ul><li><p>2.3.1 创建JAVA_HOME目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir -p&nbsp;</font>&nbsp;/usr/local/java_home<br></div></li><li><p>2.3.2 授权目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod&nbsp;</font>&nbsp;777&nbsp;&nbsp;/usr/local/java_home <br></div></li><li><p>2.3.3 切换目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;cd</font><font color="#3300BB">&nbsp;&nbsp;</font>/usr/local/java_home<br></div></li><li><p>2.3.4 解压文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;tar</font><font color="#3300BB">&nbsp;-zxvf</font>&nbsp;&nbsp;jdk-11.0.2_linux-x64_bin.tar.gz<br></div></li><li><p>2.3.5 设置环境变量</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;vim</font><font color="#3300BB">&nbsp;&nbsp;</font>/etc/profile<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#770088">export&nbsp;</font>&nbsp;<font color="#0000FE">JAVA_HOME=</font>/usr/local/java_home/jdk-11.0.2<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#770088">export&nbsp;</font>&nbsp;<font color="#0000FE">PATH=$PATH:$JAVA_HOME</font>/bin<br></div></li><li><p>2.3.6 刷新配置</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#770088">source&nbsp;</font>&nbsp;<font color="#0000FE"></font>/ect/profile<br></div></li></ul></li><li><p>2.4 安装Git</p><ul><li><p>2.4.1 准备环境</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font>&nbsp;&nbsp;mkdir<font color="#3300BB"><font color="#3300BB">&nbsp;-p</font></font>&nbsp; /usr/local/git_home<br></div></li><li><p>2.4.2 创建git_home目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;yum install</font><font color="#3300BB">&nbsp;&nbsp;-y</font>&nbsp; curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br></div></li><li><p>2.4.3 下载包</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">wget</font>&nbsp;https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz<br></div></li><li><p>2.4.4 授权目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;yum install</font><font color="#3300BB">&nbsp;&nbsp;-y</font>&nbsp; gcc perl-ExtUtils-MakeMaker<br></div></li><li><p>2.4.5 切换目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod</font>&nbsp; 777 /usr/local/git_home<br></div></li><li><p>2.4.6 解压目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;tar</font><font color="#3300BB">&nbsp;-zxvf</font>&nbsp; git-2.8.3.tar.gz<br></div></li><li><p>2.4.7 解压目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#770088">make&nbsp;</font>&nbsp;<font color="#0000FE">prefix</font>=/usr/local/git all<br></div></li><li><p>2.4.8 编译</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#770088">make&nbsp;</font>&nbsp;<font color="#0000FE">prefix</font>=/usr/local/git install<br></div></li><li><p>2.4.9 设置环境变量</p><p><code>无需设置环境变量</code></p></li></ul></li></ul></li><li><p><strong><font color="#4360DB">搭建Jenkins</font></strong>  </p><ul><li><p>3.1 宿主机准备</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod</font>&nbsp; 777&nbsp;/var/run/docker.sock<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir&nbsp;</font>-p &nbsp;/usr/local/jenkins_home<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod</font>&nbsp; 777&nbsp;/usr/local/jenkins_home<br></div></li><li><p>3.2 镜像拉取</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp; pull&nbsp;&nbsp;jenkins<br></div></li><li><p>3.2 创建网络</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp; network create jenkins<br></div></li><li><p>3.3 启动容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font>docker&nbsp;run --name jenkins&nbsp;<font color="#3300BB">&nbsp;-d&nbsp;</font> <font color="#3300BB">&nbsp;-p&nbsp;</font><font color="#116644">&nbsp;8080</font>:8080 <font color="#3300BB">&nbsp;-p&nbsp;</font><font color="#116644">&nbsp;50000</font>:50000     <font color="#3300BB">&nbsp;-v&nbsp;&nbsp;</font> /usr/local/jenkins_home:/var/jenkins_home&nbsp; \<br>    <font color="#3300BB">&nbsp;-v&nbsp;&nbsp;</font> /usr/local/maven_home/apache-maven-3.9.4:/var/maven_home/apache-maven-3.9.4&nbsp; \ <br>    <font color="#3300BB">&nbsp;-v&nbsp;&nbsp;</font> /usr/bin/docker:/usr/bin/docker \<br>    <font color="#3300BB">&nbsp;-v&nbsp;&nbsp;</font> /var/run/docker.sock:/var/run/docker.sock \<br>    <font color="#3300BB">&nbsp;-v&nbsp;&nbsp;</font> /usr/bin/git:/var/local/git&nbsp; \<br>    <font color="#3300BB">&nbsp;-v&nbsp;&nbsp;</font> /usr/local/java_home/jdk-11.0.2:/var/java_home/jdk-11.0.2&nbsp; \<br>    &nbsp;jenkins/jenkins:latest    <br></div><p>备注：</p><p> <code>/data/jenkins_home用于映射/var/jenkins_home目录</code></p><p> <code>/data/maven_home用于映射/var/maven_home目录，让容器使用宿主机的maven</code></p><p> <code>/usr/bin/docker、 /var/run/docker.sock挂载, 容器使用宿主机的docker</code></p><p> <code>jenkins占用8080和50000端口</code></p></li></ul></li><li><p><strong><font color="#4360DB">配置Jenkins插件</font></strong> </p><ul><li><p>4.1 安装Maven Integration plugin插件</p><img src="https://i.imgur.com/SQcXb08.png" alt="4-1-1 Maven Integration plugin图" style="zoom:100%;"></li><li><p>4.2 安装Pipeline Maven Integration插件</p><img src="https://i.imgur.com/DuvgtPt.png" alt="4-2-1 Pipeline Maven Integration图" style="zoom:100%;"></li><li><p>4.3 安装Git plugin插件</p><img src="https://i.imgur.com/IFc28cB.png" alt="4-3-1 Git plugin图" style="zoom:100%;"></li><li><p>4.4 安装Gitee插件</p><img src="https://i.imgur.com/ZOuJLYo.png" alt="4-4-1 Gitee图" style="zoom:100%;"></li><li><p>4.5 安装Publish Over SSH插件</p><img src="https://i.imgur.com/g6bbdx3.png" alt="4-5-1 Publish Over SSH图" style="zoom:100%;"></li><li><p>4.6 全局配置-Maven配置</p><p><code>默认配置: /var/maven_home/apache-maven-3.9.4/conf/settings.xml</code></p><img src="https://i.imgur.com/K27OCvN.png" alt="4-6-1 Maven全局配置图" style="zoom:100%;"><p><code>MAVE_HOME:/var/maven_home/apache-maven-3.9.4/</code></p><img src="https://i.imgur.com/USib4ML.png" alt="4-6-2 maven环境配置 " style="zoom:100%;"></li><li><p>4.7 全局配置-Git配置</p><p><code>git路径:/usr/bin/git</code></p><img src="https://i.imgur.com/Hi9cJ6M.png" alt="4-7-1 Git配置" style="zoom:100%;"></li><li><p>4.8 全局配置-JDK配置</p><p><code>jdk路径：/var/java_home/jdk-11.0.2</code></p><img src="https://i.imgur.com/DMvr2j0.png" alt="4-8-1 JDK配置" style="zoom:100%;"></li></ul></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker搭建ELK7</title>
      <link href="/2023/06/24/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BAELK7/"/>
      <url>/2023/06/24/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BAELK7/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>ElasticSearch: 7.12.1</li><li>ElasticSearch-Head:6</li><li>Kibana: 7.12.1</li><li>LogStash: 7.12.1</li></ul></li></ul></li><li><p><strong><font color="#4360DB">创建文件夹</font></strong></p><ul><li><p>2.1 创建elasticsearch、kibana、logstash、es-admin</p></li><li><p>2.2 创建目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp; -p /usr/local/elk/{elasticsearch,kibana,logstash,es-admin}<br></div><p>注释：以上命令等同于 </p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp; -p /usr/local/elk/elasticsearch<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp; -p /usr/local/elk/kibana<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp; -p /usr/local/elk/logstash<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp; -p /usr/local/elk/es-admin<br></div></li></ul></li><li><p><strong><font color="#4360DB">搭建ElasticSearch</font></strong>  </p><ul><li><p>3.1 搜索镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;pull elasticsearch:7.12.1<br></div></li><li><p>3.2 创建网络</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;network create elk<br></div></li><li><p>3.3 启动容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name es --net elk -p 6200:9200 -p 6300:9300 -e "discovery.type=single-node" elasticsearch:7.12.1<br></div></li><li><p>3.4 拷贝配置文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;cp es:/usr/share/elasticsearch/config/elasticsearch.yml   /usr/local/elk/elasticsearch/<br></div></li><li><p>3.5 修改文件夹权限</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod</font>&nbsp;666 /usr/local/elk/elasticsearch/elasticsearch.yml<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp;-p /usr/local/elk/elasticsearch/data<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod</font>&nbsp;-R 777 /usr/local/elk/elasticsearch/data<br></div></li><li><p>3.6 删除旧容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;rm -f es<br></div></li><li><p>3.7 重启新容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name es --net elk -p 9200:9200 -p 9300:9300  -e "discovery.type=single-node" --privileged=true  -v /usr/local/elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  -v   /usr/local/elk/elasticsearch/data:/usr/share/elasticsearch/data    elasticsearch:7.12.1<br></div></li><li><p>3.8 验证</p><ul><li><p>查看运行中的容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;ps -a<br></div></li><li><p>查看容器的日志</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;logs -f --tail 200 容器ID<br></div></li><li><p>连接ES</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">curl</font>&nbsp;http://127.0.0.1:9200<br></div><p>说明:</p><ol><li><p>-p(小写) 映射端口号,主机端口:容器端口</p></li><li><p>-P(大写) 随机为容器指定端口</p></li><li><p>-v 进行容器的挂载</p></li><li><p>-name 指定容器别名</p></li><li><p>-net 连接指定网络</p></li><li><p>-e 指定启动容器时的环境变量</p></li><li><p>-d 后台运行容器</p></li><li><p>–privilieged=true 使容器有权限挂载目录</p></li></ol></li></ul></li></ul></li><li><p><strong><font color="#4360DB">搭建ElasticSearch-Head</font></strong> </p><p>ES可视化界面,方便后面调试日志有没有成功输入到ES。非必须安装的项目,可跳过此步骤.</p><ul><li><p>4.1 搜索镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;pull mobz/elasticsearch-head:5<br></div></li><li><p>4.2 运行容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name es-admin --net elk -p 9100:9100 mobz/elasticsearch-head:5<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cd</font>&nbsp;/usr/local/elk/es-admin<br></div></li><li><p>4.3 配置文件拷贝到当前目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;cp es-admin:/usr/src/app/Gruntfile.js ./<br></div></li><li><p>4.4 编辑配置文件(Gruntfile.js) </p><p>  connect-&gt;server-&gt;options 添加 hostname: ‘0.0.0.0’</p></li><li><p>4.5 将文件拷贝回去</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;cp Gruntfile.js es-admin:/usr/src/app/<br></div></li><li><p>4.6 重启容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;restart es-admin<br></div><p>问题：如果打开页面之后节点、索引等显示完全,但是数据浏览中无数据显示.那我们还需要改一个配置文件,这是因为ES6之后增加了请求头的严格校验的原因(我们装的是7.12.1版本)</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;restart es-admin<br></div><pre class=" language-shell"><code class="language-shell">1.将es-admin容器文件拷贝至宿主机docker cp es-admin:/usr/src/app/_site/vendor.js ./2.编辑文件vim vendor.js** 6886行: contentType: "application/json;charset=UTF-8"** 7573行: contentType === "application/json;charset=UTF-8"3.文件回传至es-admin容器(覆盖文件内容)docker cp vendor.js es-admin:/usr/src/app/_site/</code></pre><p>发现连接ElasticSearch不成功,报错如下:</p><img src="https://i.imgur.com/TEA0J1v.png" alt="4-6-2 页面报错截图" style="zoom:100%;"><p>问题原因: 跨域问题</p><p>解决方案：</p><pre class=" language-shell"><code class="language-shell">由于跨域问题,因此需要在elasticsearch.yml配置中增加以下两个参数：http.cors.enabled: truehttp.cors.allow-origin: "*"1. cd /usr/local/elk/elasticsearch2. vim elasticsearch.yml   -- 增加两行配置      http.cors.enabled: true      http.cors.allow-origin: "*"3.删除旧容器   docker rm -f es4.启动新容器  docker run -d --name es --net elk -p 9200:9200 -p 9300:9300  -e "discovery.type=single-node" --privileged=true  -v /usr/local/elk/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml  -v /usr/local/elk/elasticsearch/data:/usr/share/elasticsearch/data   elasticsearch:7.12.15.验证ES    - 连接ES curl http://127.0.0.1:92006.验证ElasticSearch-Head插件  访问 http://ip公网:9100测试连接,连接效果如下则为成功</code></pre><img src="https://i.imgur.com/TEA0J1v.png" alt="4-6-3 页面跨域报错截图" style="zoom:100%;"></li></ul></li><li><p><strong><font color="#4360DB">搭建Kibana</font></strong> </p><ul><li><p>5.1 拉取镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;pull kibana:7.12.1<br></div></li><li><p>5.2 启动容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d \  --name kibana \  --net elk \  -P -e "ELASTICSEARCH_HOSTS=http://es:9200" \  -e "I18N_LOCALE=zh-CN" kibana:7.12.1<br></div><img src="https://i.imgur.com/zlha9pQ.png" alt="4-6-3 启动日志截图" style="zoom:100%;"></li></ul></li></ol><p>​    5.3 拷贝文件</p><ul><li><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;cp kibana:/usr/share/kibana/config/kibana.yml /usr/local/elk/kibana/<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod</font>&nbsp;666 kibana/kibana.yml<br></div></li><li><p>5.4 修改改该配置文件,主要修改elasticsearch.hosts 并新增i18n.locale配置:</p><p>增加配置:</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">vim</font>&nbsp; /usr/local/elk/kibana/kibana.yml<br></div><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">server.name</font>: kibana<br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">server.host</font>: "0"<br>    <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">elasticsearch.hosts</font>: [ "http://localhost:9200" ]<br>    <font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>monitoring.ui.container.elasticsearch.enabled:<font color="#FF4DBB"> true</font><font color="#FF4DBB"></font></font><br><font color="#BEBE12">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>i18n.locale: zh-CN<font color="#FF4DBB"></font></font><br></div></li><li><p>5.5 删除旧容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;rm -f kibana<br></div></li><li><p>5.6 启动新容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name kibana \  -p 5601:5601 \  -v /usr/local/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml \  --net elk kibana:7.12.1<br></div></li><li><p>5.7 启动报错：xpack.encryptedSavedObjects.encryptionKey未设置</p><ul><li><p>解决方案：kibana.yml增加三个配置</p><p><code>xpack.encryptedSavedObjects.encryptionKey: encryptedSavedObjects12345678909876543210</code><br><code>xpack.security.encryptionKey: encryptionKeysecurity12345678909876543210</code><br><code>xpack.reporting.encryptionKey: encryptionKeyreporting12345678909876543210</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cd</font>&nbsp;/usr/local/elk/kibana/<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">vim</font>&nbsp;kibana.yml<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;rm -f kibana<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name kibana \  -p 5601:5601 \  -v /usr/local/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml \  --net elk kibana:7.12.1<br></div></li></ul></li><li><p>5.8 启动报错：Chromium沙盒提供附加保护层，但不受Linux Centos8.3.2011支持</p><ul><li><p>解决方案：kibana增加一个配置</p><p><code>xpack.reporting.capture.browser.chromium.disableSandbox: false</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cd</font>&nbsp;/usr/local/elk/kibana/<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">vim</font>&nbsp;kibana.yml<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;rm -f kibana<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name kibana \  -p 5601:5601 \  -v /usr/local/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml \  --net elk kibana:7.12.1<br></div></li></ul></li><li><p>5.9 启动报错：访问页面报错：Kibana server is not ready yet &amp; 日志：{“type”:”log”,”@timestamp”:”2023-06-23T09:55:57+00:00”,”tags”:[“error”,”elasticsearch”],”pid”:6,”message”:”Request error, retrying GET <a href="http://localhost:9200/_xpack?accept_enterprise=true">http://localhost:9200/_xpack?accept_enterprise=true</a> =&gt; connect ECONNREFUSED 127.0.0.1:9200”}</p><p>​      <img src="https://i.imgur.com/C692xe6.png" alt="5-9-1 报错截图" style="zoom:100%;"></p><ul><li><p>解决方案</p><p>kibana.yml配置中  elasticsearch.hosts: [ “<a href="http://localhost:9200&quot;">http://localhost:9200"</a> ] or elasticsearch.hosts: [ “<a href="http://127.0.0.1:9200&quot;">http://127.0.0.1:9200"</a> ] 改为真实ip地址 </p><div style="background:#F2F3F4;padding:10px;font-size:15px;"> <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">hostname</font>&nbsp;-i<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cd</font>&nbsp;/usr/local/elk/kibana/<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">vim</font>&nbsp;kibana.yml<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp; rm -f kibana<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name kibana \  -p 5601:5601 \  -v /usr/local/elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml \  --net elk kibana:7.12.1  <br></div>测试访问，显示该页面则意味着者kibana搭建成功<img src="https://i.imgur.com/dwTeQNY.png" alt="5-9-2 启动报错截图" style="zoom:100%;"></li></ul></li></ul><ol start="6"><li><p>搭建Logstash</p><ul><li><p>6.1 拉取镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;pull logstash:7.12.1<br></div></li><li><p>6.2 运行容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d -P --name logstash --net elk logstash:7.12.1<br></div></li><li><p>6.3 拷贝数据</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;cp logstash:/usr/share/logstash/config /usr/local/elk/logstash/<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;cp logstash:/usr/share/logstash/data /usr/local/elk/logstash/<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;cp logstash:/usr/share/logstash/pipeline /usr/local/elk/logstash/<br></div></li><li><p>6.4 文件赋权</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">chmod</font>&nbsp;-R 777 logstash/<br></div></li><li><p>6.5 修改配置</p><ul><li><p>修改logstash/config 下的logstash.yml文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">http.host</font>: "0.0.0.0"<br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">xpack.monitoring.elasticsearch.hosts</font>: [ "http://127.0.0.1:9200" ]<br>    <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">xpack.monitoring.enabled</font>: true<br></div></li><li><p>修改logstash/pipeline下的logstash.conf文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>input{<br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>&nbsp;&nbsp;&nbsp;&nbsp;tcp{<br>    <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE"></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mode =&gt; "server"<br>    <font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font><font color="#FF4DBB">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host =&gt; "0.0.0.0"</font><font color="#FF4DBB"></font></font><br><font color="#BEBE12">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port =&gt; 5044<font color="#FF4DBB"></font></font><br><font color="#BEBE12">6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec =&gt; json_lines<font color="#FF4DBB"></font></font><br><font color="#BEBE12">7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>}<font color="#FF4DBB"></font></font><br><br><font color="#BEBE12">9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>output{<font color="#FF4DBB"></font></font><br><font color="#BEBE12">10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;elasticsearch{<font color="#FF4DBB"></font></font><br><font color="#BEBE12">11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hosts =&gt; [ "http://127.0.0.1:9200" ]<font color="#FF4DBB"></font></font><br><font color="#BEBE12">12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index =&gt; "springboot-api"<font color="#FF4DBB"></font></font><br><font color="#BEBE12">13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec =&gt; "json"<font color="#FF4DBB"></font></font><br><font color="#BEBE12">14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>stdout{<font color="#FF4DBB"></font></font><br><font color="#BEBE12">17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec =&gt; rubydebug<font color="#FF4DBB"></font></font><br><font color="#BEBE12">18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>&nbsp;&nbsp;&nbsp;&nbsp;}<font color="#FF4DBB"></font></font><br><font color="#BEBE12">19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>}<font color="#FF4DBB"></font></font><br></div></li></ul></li><li><p>6.6 启动容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;rm -f logstash<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;run -d --name logstash --net elk \  --privileged=true \  -p 5044:5044 -p 9600:9600 \  -v /usr/local/elk/logstash/data:/usr/share/logstash/data \  -v /usr/local/elk/logstash/config/:/usr/share/logstash/config \  -v /usr/local/elk/logstash/pipeline/:/usr/share/logstash/pipeline \  logstash:7.12.1<br></div></li><li><p>6.7 查看日志</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">docker</font>&nbsp;log -f --tail 200 logstash<br></div></li><li><p>6.9 验证</p><ul><li><p>6.9.1 创建SpringBoot应用 </p></li><li><p>6.9.2 引入logstash依赖</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#117700">&nbsp;&nbsp;&lt;dependency&gt;</font><br>    <font color="#117700">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;</font>org.springframework.boot<font color="#117700">&lt;/groupId&gt;</font><br>    <font color="#117700">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;</font>spring-boot-starter-web<font color="#117700">&lt;/artifactId&gt;</font><br>    <font color="#117700">&nbsp;&nbsp;&lt;/dependency&gt;</font><br></div></li><li><p>6.9.3 resource创建log/logback-spring.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/base.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOGSTASH<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net.logstash.logback.appender.LogstashTcpSocketAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>destination</span><span class="token punctuation">></span></span>34.134.47.166:5044<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>destination</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志输出编码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>net.logstash.logback.encoder.LogstashEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>providers</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timestamp</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeZone</span><span class="token punctuation">></span></span>UTC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeZone</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timestamp</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>                        {                        <span class="token comment" spellcheck="true">&lt;!--请求ID --></span>                        "requestId": %X{process-id}                        <span class="token comment" spellcheck="true">&lt;!--es索引名称 --></span>                        "index":"springboot-api",                        <span class="token comment" spellcheck="true">&lt;!--应用名称 --></span>                        "appname": "${spring.application.name}",                        <span class="token comment" spellcheck="true">&lt;!--打印时间 --></span>                        "timestamp": "%d{yyyy-MM-dd HH:mm:ss.SSS}",                        <span class="token comment" spellcheck="true">&lt;!--线程名称 --></span>                        "thread": "%thread",                        <span class="token comment" spellcheck="true">&lt;!--日志级别 --></span>                        "level": "%level",                        <span class="token comment" spellcheck="true">&lt;!--日志名称 --></span>                        "logger_name": "%logger",                        <span class="token comment" spellcheck="true">&lt;!--日志信息 --></span>                        "message": "%msg",                        <span class="token comment" spellcheck="true">&lt;!--日志堆栈 --></span>                        "stack_trace": "%exception"                        }                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>providers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOGSTASH<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>6.9.4 修改application.yml文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font></font><font color="#3300BB">logging:</font>&nbsp;<br>    <font></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#3300BB">config:</font>&nbsp;&nbsp;classpath:log/logback-spring.xml<br></div></li><li><p>6.9.5 编写一个测试类</p><img src="https://i.imgur.com/beVfgzH.png" alt="6-9-1 测试类截图" style="zoom:100%;"></li><li><p>6.9.6 查看ElasticSearch-Head界面即可看到输出日志</p><img src="https://i.imgur.com/iiRAmB1.png" alt="6-9-2 日志截图" style="zoom:100%;"></li><li><p>6.9.6 Kibana增加索引 springboot-log</p><img src="https://i.imgur.com/okyxsHp.png" alt="6-9-3 Kibana截图" style="zoom:100%;"></li><li><p>6.9.7 完毕</p><img src="https://i.imgur.com/PcrAMbV.png" alt="6-9-4 Kibana日志截图" style="zoom:100%;"></li></ul><p>​       </p></li></ul></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins+Docker+Git+JDK部署SpringBoot项目</title>
      <link href="/2023/03/25/Jenkins+Docker+Git+JDK%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/03/25/Jenkins+Docker+Git+JDK%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><p><input checked="" disabled="" type="checkbox">  操作系统：Centos7</p></li><li><p><input checked="" disabled="" type="checkbox">  环境要求:</p><ul><li><p>Maven &gt; 3.9.0</p></li><li><p>JDK &gt;= 11</p></li><li><p>Docker &gt;= 23.0.1</p></li><li><p>Jekins &gt;= 2.396</p></li></ul></li></ul></li></ol><ol start="2"><li><p>选择系统配置</p><img src="https://i.imgur.com/Mb0iG7a.png" alt="2-1截图" style="zoom:100%;"></li><li><p>点击系统配置</p><img src="https://i.imgur.com/ugUP3Bq.png" alt="3-1截图" style="zoom:100%;"></li><li><p>找到gitee插件</p><img src="https://i.imgur.com/QPS4uFR.png" alt="4-1截图" style="zoom:100%;"><p><code>如果没有gitee这一栏的话,说明你没有安装这个插件。</code></p><p><code>解决方案</code>：var/maven_home/apache-maven-3.9.0</p><ul><li><p><code>选择系统管理&gt;插件管理</code></p><img src="https://i.imgur.com/8mwWVI5.png" alt="4-1截图" style="zoom:100%;"></li><li><p><code>选择安装、然后重启。</code></p><img src="https://i.imgur.com/14bSp1r.png" alt="4-2截图" style="zoom:100%;"></li></ul></li><li><p>maven、ssh插件安装</p><img src="https://i.imgur.com/BjVeFK0.png" alt="5-1截图" style="zoom:100%;"><img src="https://i.imgur.com/w56JYrK.png" alt="5-2截图" style="zoom:100%;"></li><li><p>流水线基本配置</p><ul><li><p>6.1 git配置</p><p>​    <img src="https://i.imgur.com/ZAVaHrs.png" alt="6-1截图" style="zoom:100%;"></p><p>​    <img src="https://i.imgur.com/0mIBJrx.png" alt="6-2截图" style="zoom:100%;"></p></li><li><p>6.2 SSH配置</p><p>​       <img src="https://i.imgur.com/AboiEUi.png" alt="5-2-1截图" style="zoom:100%;"></p><p>​       <img src="https://i.imgur.com/7ENFFz5.png" alt="5-2-2截图" style="zoom:100%;"></p></li></ul></li><li><p>新建项目</p><ul><li><p>7.1 选择项目类型</p><p>​      <img src="https://i.imgur.com/Mb0iG7a.png" alt="7-2-1截图" style="zoom:100%;"></p><p>​      <img src="https://i.imgur.com/Mb0iG7a.png" alt="7-2-2截图" style="zoom:100%;"></p><p>​      <img src="https://i.imgur.com/aQtPrv1.png" alt="7-2-3截图" style="zoom:100%;"></p></li><li><p>7.2 选择项目</p><ul><li><p>7.2.1 输入项目描述</p><p>​          <img src="https://i.imgur.com/6OHIhWd.png" alt="7-2-1截图" style="zoom:100%;"></p></li><li><p>7.2.2 选择代码库</p><p>​          <img src="https://i.imgur.com/es9naNY.png" alt="7-2-2截图" style="zoom:100%;"></p></li><li><p>7.2.3 配置构建命令</p><p>​          <img src="https://i.imgur.com/kIGt4GC.png" alt="7-2-3截图" style="zoom:100%;"></p></li><li><p>7.2.4 SSH配置</p><p> <code>1.选择部署方式</code></p><p>​     <img src="https://i.imgur.com/00QCnX7.png" alt="7-2-4截图" style="zoom:100%;"></p><p><code>2.配置部署方式</code></p><p>  （1）配置推送文件到指定目录</p><p>​             <img src="https://i.imgur.com/WlMDb2J.png" alt="7-2-1截图" style="zoom:100%;"></p><p>  （2）编写部署脚本(参考)</p><p>​            <img src="https://i.imgur.com/efzFBvL.png" alt="7-2-3截图" style="zoom:100%;"></p><p>  （3） 配置执行命令</p><p>​            <img src="https://i.imgur.com/6hHORfS.png" alt="7-2-4截图" style="zoom:100%;">  </p></li></ul></li></ul></li></ol><ul><li><p>7.3 点击保存</p><p>​       <img src="https://i.imgur.com/qLLEmAf.png" alt="6-7截图" style="zoom:100%;"></p></li></ul><ol start="8"><li><p>部署项目</p><ul><li><p>8.1 点击新构建项目</p><p>​       <img src="https://i.imgur.com/wQOqljw.png" alt="8-1截图" style="zoom:100%;"></p></li><li><p>8.2 构建</p><p>​      <img src="https://i.imgur.com/3bbKU9P.png" alt="8-2截图" style="zoom:100%;"></p></li><li><p>8.3 查看部署日志</p><p><code>8.3.1 选择最新一次构建</code></p><p>​        <img src="https://i.imgur.com/Zjn61mB.png" alt="8-3截图" style="zoom:100%;"></p><p><code>8.3.2 查看日志</code></p><p>​     <img src="https://i.imgur.com/9DOkLwS.png" alt="8-4截图" style="zoom:100%;"></p><p>​     <img src="https://i.imgur.com/x3cLOqr.png" alt="8-5截图" style="zoom:100%;"></p></li><li><p>8.4  查看Docker远程部署日志</p><ul><li>8.4.1 选择部署服务器查看日志<code>查看部署镜像</code><img src="https://i.imgur.com/6UH5YK2.png" alt="8-4-1截图" style="zoom:100%;"><code>检查是否部署成功</code><img src="https://i.imgur.com/h2h26hP.png" alt="8-4-2截图" style="zoom:100%;"></li><li>8.4.2 测试连接<img src="https://i.imgur.com/W8CicdE.png" alt="8-4-3截图" style="zoom:100%;"></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之Git服务器常用命令</title>
      <link href="/2023/03/16/Linux%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AFGit%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/"/>
      <url>/2023/03/16/Linux%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AFGit%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Git 版本&gt;1.8.3 </li></ul></li></ul></li><li><p><strong><font color="#4360DB">服务器端Git常用命令</font></strong></p><ul><li><p>2.1 获取Git用户名</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex ~]##&nbsp;&nbsp;</font><font color="#3300BB">git </font>&nbsp;config user.name&nbsp;<br></div></li><li><p>2.2 获取Git密码</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex ~]##&nbsp;&nbsp;</font><font color="#3300BB">git</font>&nbsp;config user.password&nbsp;<br></div></li></ul><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 15px 15px">    <p>「参考文章」<a style="color:#37f;" href="https://juejin.cn/post/7103138120849162277" target="_blank">https://blog.51cto.com/u_15127660/3924979</a></p></blockquote></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境搭建Nexus3</title>
      <link href="/2023/03/16/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BANexus3/"/>
      <url>/2023/03/16/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BANexus3/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker环境搭建镜像库-Nexus"><a href="#Docker环境搭建镜像库-Nexus" class="headerlink" title="Docker环境搭建镜像库(Nexus)"></a>Docker环境搭建镜像库(Nexus)</h1><ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Docker：1.13.1 (当前版本:1.22.1)</li><li>JDK: 8</li></ul></li></ul></li><li><p>拉取nexus镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">docker</font> pull sonatype/nexus3&nbsp;&nbsp; <br></font></div></li><li><p>运行nexus镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">docker</font> run -d --name nexus3 --restart=always -p 8081:8081 -p 5000:5000 -v /data/nexus-data:/nexus-data sonatype/nexus3&nbsp;&nbsp; <br></font></div><p>启动 -v 代表磁盘挂载映射,即 /data/nexus-data(宿主机磁盘位置):/nexus-data(容器磁盘位置) </p><p>-p 8081:8081 代表启动端口映射</p><p>-p 5000:5000 代表http请求程序的端口映射 </p></li><li><p>查看容器启动情况</p><p>​    <code>插叙容器启动日志</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">docker</font> logs <font color="#3300BB">-f</font> --tail 200 4cf9458d1545(容器ID)&nbsp;&nbsp; <br></font></div>    <ul><li><p>发现 启动失败,原因： 报错 <code>目录</code> permission deined，无法写文件到该目录。  于是 给 exit 容器 ，执行 chmod 777 /data/nexus-data</p></li><li><p>再次启动发现还是不行，发现内存不够了。建议有一台4G内存的服务器。<span class="github-emoji"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>&lt; img align=”left” src=”<a href="https://i.imgur.com/r46vcID.png&quot;/>">https://i.imgur.com/r46vcID.png"/&gt;</a></p></li></ul></li><li><p>安装成功后的Nexus3</p><ul><li><p>4.1 访问网页</p><p>&lt; img align=”left” src=”<a href="https://i.imgur.com/ASM5MbF.png&quot;/>">https://i.imgur.com/ASM5MbF.png"/&gt;</a></p></li><li><p>4.2 获取密码</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">cd</font> /data/nexus-data/&nbsp;&nbsp; <br></font></div>    <p>找到文件 admin.password 里面的就是密码，默认用户是admin.</p></li><li><p>4.3 修改密码</p><p>登陆账户后，会提示，修改密码。</p></li><li><p>4.4 设置Docker(hosted) Repository</p><ul><li><p>4.4.1 设置创建镜像仓库</p><img src="https://i.imgur.com/r46vcID.png" width="100%"><img src="https://i.imgur.com/4xCGZak.png" width="100%"></li><li><p>4.4.2 设置HTTP port（5000）</p><img src="https://i.imgur.com/qr0c8QV.png" width="100%"><p><code>1.这个端口与之前运行的docker容器有关联</code> </p><img src="https://i.imgur.com/COsHiau.png" width="100%"><img src="https://i.imgur.com/i1Z1txt.png" width="100%"><p><code>2.设置热部署</code></p><img src="https://i.imgur.com/9Nbyh3V.png" width="100%"></li><li><p>4.4.3 创建角色权限</p><img src="https://i.imgur.com/p5Q0vjS.png" width="100%"><img src="https://i.imgur.com/HOYJzhc.png" width="100%"><img src="https://i.imgur.com/HOYJzhc.png" width="100%"><p><code>新增一个角色如下</code></p><img src="https://i.imgur.com/VJmTm8K.png" width="100%"></li><li><p>4.4.4 创建用户</p><img src="https://i.imgur.com/daxADjz.png" width="100%"><img src="https://i.imgur.com/Hw7OzIH.png" width="100%"><img src="https://i.imgur.com/2r3vb4t.png" width="100%"></li><li><p>4.4.5 配置Realms</p><img src="https://i.imgur.com/9PBg3qh.png" width="100%"></li></ul></li><li><p>4.5 使用docker命令登陆验证</p><p>​    <img src="https://i.imgur.com/Xvp42bN.png"></p><p>输入完<code>正确</code>密码，发现，提示如下错误。于是可以看出，没有该访问不安全。于是需要去设置 以不安全方式访问的 <code>配置</code>    </p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">cd</font>&nbsp;/etc/docker/&nbsp;&nbsp;  <br></font>    <font>[root@www ~]#&nbsp;<font color="#3300BB">ls</font>&nbsp;-lrt&nbsp;&nbsp;  <br></font>    <font>[root@www ~]#&nbsp;<font color="#3300BB">cat</font>&nbsp;daemon.json&nbsp;&nbsp;  <br></font>    <font>[root@www ~]#&nbsp;<font color="#3300BB">vim</font>&nbsp;daemon.json&nbsp;&nbsp;  <br></font></div>    <br> <div style="background:#F2F3F4;padding:10px;font-size:15px;">     <font color="#BEBE12">1&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;</font><br>     <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#AA1111">"registry-mirrors": ["https://czotgnzp.mirror.aliyuncs.com"],</font><br>     <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#AA1111">"insecure-registries":["106.12.112.138:5000"]</font><br>     <font color="#BEBE12">4&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;</font><br></div><br><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;systemctl<font color="#3300BB"> restart</font> docker   &nbsp;daemon.json&nbsp;&nbsp;  <br></font></div>    </li><li><p>4.6 查看镜像启动状态</p><p><code>docker ps -a</code></p><img src="https://i.imgur.com/VhsBt4H.png" width="100%"><p>端口5000和8081正常显示证明成功了。</p></li><li><p>4.7 重新登陆nexus网页</p><img src="https://i.imgur.com/U5f5YDb.png" width="100%"><img src="https://i.imgur.com/U5f5YDb.png" width="100%"><img src="https://i.imgur.com/A39JAOY.png" width="100%"></li><li><p>4.8 再次使用Docker 登陆 &amp; 登出</p><p><code>登陆</code></p><img src="https://i.imgur.com/Fd077SF.png" width="100%"><p><code>登出</code></p><img src="https://i.imgur.com/Z55WQVh.png" width="100%"></li><li><p>4.9 将之前springboot的镜像 上传到 今天搭建的 私服(nexus)</p><ul><li><p>重新生成镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">docker</font> build -t sample:v1&nbsp;&nbsp;&nbsp;  <br></font></div>    <img src="https://i.imgur.com/DvnSt21.png" width="100%"></li><li><p>上传镜像到私服</p><p>1.打包</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">docker</font>&nbsp;&nbsp;tag&nbsp; sample:v1 <font color="#B73E8B">106.12.112.138:5000</font>&nbsp;&nbsp;/sample:v1 &nbsp;&nbsp;&nbsp;  <br></font></div>    <img src="https://i.imgur.com/Z55WQVh.png" width="100%"><p>2.验证一下是打包否成功</p><img src="https://i.imgur.com/E58swUh.png" width="100%"><p> 3.上传镜像包至镜像库</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">docker</font>&nbsp;push&nbsp;<font color="#B73E8B">106.12.112.138:5000</font>/sample:v1 &nbsp;&nbsp;&nbsp;  <br></font></div>    <img src="https://i.imgur.com/NC0MnTM.png" width="100%"><p>遇到上面问题,是没有登陆账号。先执行登陆。</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">docker</font>&nbsp;login &nbsp;<font color="#B73E8B">106.12.112.138:5000</font>&nbsp;&nbsp;&nbsp;  <br></font></div>    <p>再执行</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;<font color="#3300BB">docker</font>&nbsp;push&nbsp;<font color="#B73E8B">106.12.112.138:5000</font>/sample:v1 &nbsp;&nbsp;&nbsp;  <br></font></div>    <img src="https://i.imgur.com/Uf7DBCz.png" width="100%"><p>目测成功哈哈<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li></ul></li></ul><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding:3px 3px">    「參考文獻」<a style="color:#37f;" href="https://www.jianshu.com/p/dd586990fcb0" target="_blank">https://www.jianshu.com/p/dd586990fcb0</a><br>    「参考文献」<a style="color:#37f;" href="https://hub.docker.com/r/sonatype/nexus3#running" target="_blank">https://hub.docker.com/r/sonatype/nexus3#running</a><br>    「参考文献」<a style="color:#37f;" href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank">https://docs.docker.com/engine/reference/commandline/cli/</a><br></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境运行SpringBoot项目</title>
      <link href="/2023/03/15/Docker%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8CSpringBoot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/03/15/Docker%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8CSpringBoot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker环境运行SpringBoot项目"><a href="#Docker环境运行SpringBoot项目" class="headerlink" title="Docker环境运行SpringBoot项目"></a>Docker环境运行SpringBoot项目</h1><ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Docker &gt;= 20.10.17 </li></ul></li></ul></li><li><p><strong><font color="#4360DB">新建SpringBoot项目</font></strong></p><ul><li><p>2.1 创建maven项目</p>   <img src="https://i.imgur.com/8er7mHI.png" alt="2-1截图" style="zoom:100%;"></li><li><p>2.2 编辑配置项</p>   <img src="https://i.imgur.com/loknPdq.png" alt="2-2截图" style="zoom:100%;"></li><li><p>2.3 本地启动测试</p>   <img src="https://i.imgur.com/YEczGx4.png" alt="2-3截图" style="zoom:100%;"></li><li><p>2.4 访问页面</p>   <img src="https://i.imgur.com/A0Lngcd.png" alt="2-4截图" style="zoom:100%;"><p>ok，目前没有什么问题。<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li></ul></li><li><p><strong><font color="#4360DB">上传文件至服务器</font></strong></p><ul><li><p>3.1 服务器创建一个sample目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;cd /home/ec2-user/dev_install</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;mkdir sample</font><br></div></li><li><p>3.2 SpringBoot工程生成sample-0.0.1-SNAPSHOT.jar &amp; 上传至sample目录</p><img src="https://i.imgur.com/asl5HTf.png" alt="部署成功" style="zoom:100%;"></li></ul></li><li><p>创建Dockerfile</p><ul><li><p>4.1 编写dockerfile镜像文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;cd &nbsp;/home/ec2-user/dev_install/sample</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;vim &nbsp;dockerfiile</font><br></div><p><code>dockerfile内容如下</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">  <font color="#ECBD00">1</font><font color="ECBD00">  &nbsp;<font color="#ECBD00">FROM</font> openjdk:8</font><br>    <font color="#ECBD00">2</font><font>  &nbsp;<font color="#ECBD00">COPY</font> ./sample-0.0.1-SNAPSHOT.jar app.jar</font><br><font color="#ECBD00">3</font><font color="#3300BB">  &nbsp;<font color="#ECBD00">ENTRYPOINT</font> <font color="#FE76F3">["java","-Djava.security.egd=file:/dev/./urandom/","-jar","/app.jar"]</font></font><br><font color="#ECBD00">4</font><font color="#3300BB">  &nbsp;<font color="#ECBD00">EXPOSE</font> 8080</font><br></div></li></ul></li><li><p>生成镜像</p><ul><li><p>4.1 编写dockerfile镜像文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;cd &nbsp;/home/ec2-user/dev_install/sample</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;docker &nbsp;build &nbsp;-t &nbsp;sample:v1</font>&nbsp; <font color="#FE76F3">.</font><br> </div></li><li><p>4.2 测试结果</p>   <img src="https://i.imgur.com/CgHwSQf.png" alt="测试结果截图" style="zoom:100%;"></li></ul></li></ol><p>   <font color="red"><b>注意</b></font>: 后面有个点别忘了 <span class="github-emoji"><span>👀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ol start="6"><li><p>启动镜像</p><ul><li><p>6.1 编写dockerfile镜像文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;docker &nbsp;run -p 8080:8080 -d sample:v1</font><br> </div></li><li><p>6.2 启动结果</p><img src="https://i.imgur.com/pMprzP5.png" alt="启动结果截图" style="zoom:100%;"></li></ul></li><li><p>网页测试运行</p>   <img src="https://i.imgur.com/oChcuno.png" alt="网页测试截图" style="zoom:100%;"></li></ol><p>​         走到这一步，你的SpringBoot项目就成功的在Docker环境成功运行了<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 15px 15px">    <p>「参考文献」<a style="color:#37f;" href="https://juejin.cn/post/7103138120849162277" target="_blank">https://docs.docker.com/language/java/develop/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境报错之elasticsearch-create-enrollment-token no such file or directory</title>
      <link href="/2023/03/05/Docker%E4%B9%8Belasticsearch-create-enrollment-token%20no%20such%20file%20or%20directory/"/>
      <url>/2023/03/05/Docker%E4%B9%8Belasticsearch-create-enrollment-token%20no%20such%20file%20or%20directory/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7+</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Docker：1.13.1</li><li>ElasticSearch：8.6.2</li></ul></li></ul></li><li><p><strong><font color="#4360DB">Docker环境搭建Kibana遇到的问题</font></strong></p><ul><li><p>2.1 照着ElasticSearh官网提供的Document,试图获取Kibana的搭建环境生成的Token命令，但是报错了。如下：</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font>docker&nbsp; exec&nbsp; -it es-node01 &nbsp;/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token&nbsp; -s &nbsp;kibana&nbsp;<br></div></li><li><p>2.2 错误截图</p><img src="https://i.imgur.com/Lh7rYF2.png" alt="报错截图" style="zoom:100%;"> </li><li><p>2.3 问题原因：请检查你的容器是elasticsearch而非Kibana容器。</p></li></ul></li><li><p><strong><font color="#4360DB">Kibana登陆验证码</font>「<font color="#FBBC05">补充</font>」</strong>  </p><ul><li><p>3.1 Kibana首页使用Token登陆后，还需要进行一次用户登陆。但是需要验证码，执行<code>获取验证码</code>命令</p><p>docker exec -u root -it kib-01 /usr/share/kibana/bin/kibana-verification-code -s kibana</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#docker &nbsp;exec &nbsp;<font color="#3300BB">-u</font> &nbsp;root &nbsp;-it&nbsp; kib-01 &nbsp;/usr/share/kibana/bin/kibana-verification-code&nbsp;&nbsp; -s&nbsp;&nbsp; kibana</font>&nbsp;&nbsp;/usr/local/nginx/conf<br></div></li></ul><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 10px 15px">    <p>「参考文章」<strong><a style="color:#37f;" href="https://www.elastic.co/guide/en/kibana/8.6/docker.html" target="_blank">Kibana环境搭建</a></strong></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境ElasticSearch入门环境搭建</title>
      <link href="/2023/02/05/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAElasticSearch/"/>
      <url>/2023/02/05/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAElasticSearch/</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载镜像</p><div style="background:#F2F3F4;padding:10px;font-size:15px;margin-left:31px;">    docker &nbsp;pull &nbsp;docker.elastic.co/elasticsearch/elasticsearch:8.6.2</div></li><li><p>建立网络</p><div style="background:#F2F3F4;padding:10px;font-size:15px;margin-left:31px;">    docker &nbsp;network &nbsp;<font color="#0000CC">create</font> elastic</div></li><li><p>运行ElasticSearch容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;margin-left:32px;">    docker &nbsp;run <font color="#0000CC">&nbsp;--name</font> &nbsp;es01 <font color="#0000CC">&nbsp;--net</font> &nbsp;elastic <font color="#0000CC">-p</font> &nbsp;9200:9200 <font color="#0000CC">&nbsp;-it</font> &nbsp;docker.elastic.co/elasticsearch/elasticsearch:8.6.2</div></li><li><p>进入容器重置密码</p><div style="background:#F2F3F4;padding:10px;font-size:15px;margin-left:32px;">    docker &nbsp;exec <font color="#0000CC">&nbsp;-it</font> &nbsp;es01 &nbsp;/usr/share/elasticsearch/bin/elasticsearch-reset-password &nbsp;-u &nbsp;elastic</div><p><code>可能存在的问题：cURL error (77): Problem with the SSL CA cert  </code></p><ul><li><p>root权限进入ES容器</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    docker exec <font color="#0000CC">-it</font> es01 /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic</div></li><li><p>安装apt-get</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    apt-get update</div></li><li><p>安装wget</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    apt-get install wget</div></li><li><p>安装CA证书</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#0000CC" wget="">wget</font>&nbsp;&nbsp;https://curl.haxx.se/ca/cacert.pem &amp;&amp; mv cacert.pem /etc/ssl/certs/</div></li></ul></li><li><p>生成HTTP的CRT证书</p><div style="background:#F2F3F4;padding:10px;font-size:15px;margin-left:32px;">    docker <font color="#0000CC" wget="">-u</font> 0 -it cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .</div></li><li><p>退出容器，测试ElsticSearch</p><div style="background:#F2F3F4;padding:10px;font-size:15px;margin-left:32px;">    <font color="#0000CC">curl&nbsp;&nbsp;--cacert</font>&nbsp;&nbsp;http_ca.crt -u elastic https://localhost:9200</div></li></ol><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 15px 15px;">    <p>「参考文档 CA证书问题」<strong><a style="color:#37f;" href="https://www.plesk.com/kb/support/website-on-plesk-shows-curl-error-77-problem-with-the-ssl-ca-cert/" target="_blank">安装证书</a></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo之多服务器部署</title>
      <link href="/2022/11/25/Hexo%E4%B9%8B%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/11/25/Hexo%E4%B9%8B%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Hexo 版本 &gt;5.0.0 </li></ul></li></ul></li><li><p><strong><font color="#4360DB">多环境部署</font></strong></p><p>最近搭建了一个个人网站,之前的网站是部署在github上。但是想要两个网站同时部署，于是搜索了一下Hexo的官网文档，支持多环境部署。</p><p>修改 _config.yml 配置</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>deploy:</font><br>    <font>&nbsp;&nbsp;&nbsp;- type: <font color="#718c00">git1</font></font><br>    <font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repo:</font><br>    <font>&nbsp;&nbsp;&nbsp;- type: <font color="#718c00">git2</font></font><br>    <font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repo:</font><br></div><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 10px 10px">    <p>「参考文献 」<a style="color:#37f;" href="https://hexo.io/docs/one-command-deployment" target="_blank">https://hexo.io/docs/one-command-deployment</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git之hook自动部署</title>
      <link href="/2022/11/25/Git%E4%B9%8Bhook%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/11/25/Git%E4%B9%8Bhook%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Git 版本&gt;1.8.3 </li></ul></li></ul></li><li><p><strong><font color="#4360DB">Git hook自动部署</font></strong></p><ul><li><p>2.1 环境搭建</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex hooks]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir -p</font>&nbsp;&nbsp;/opt/web-page<br><font>[root@instance-32p89sex hooks]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir -p</font>&nbsp;&nbsp;/opt/temp<br><font>[root@instance-32p89sex hooks]#&nbsp;&nbsp;</font><font color="#3300BB">chown -R git:git</font>&nbsp;&nbsp;/opt/web-page<br><font>[root@instance-32p89sex hooks]#&nbsp;&nbsp;</font><font color="#3300BB">chown -R git:git</font>&nbsp;&nbsp;/opt/temp<br></div></li><li><p>2.2 创建一个仓库</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">git init</font>&nbsp;&nbsp;--bare /home/git/test.git<br></div></li><li><p>2.3 进入 git 的hook文件做修改，来使用hook监听代码提交后自动拉取代码到我们的项目文件夹。 进入.git/hooks</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font>cd .git/hooks&nbsp;&nbsp;<br></div></li><li><p>2.4 创建post-receive hook钩子,监听代码push到远程仓库后进行操作</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex hooks]#&nbsp;&nbsp;</font>touch post-receive&nbsp;&nbsp;<br></div></li><li><p>2.5 编写post-receive脚本</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#BEBE12">1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">#!/bin/sh</font><br>    <font color="#BEBE12">2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">DEPLOY_PATH</font>=/opt/web-page<br>    <font color="#BEBE12">3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#10A1EE">TEMP_PATH</font>=/opt/temp<br>    <font color="#BEBE12">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>git archive <font color="#FF4DBB">--format</font> zip <font color="#FF4DBB">--output</font> /opt/temp/mantianyy.github.io.zip main</font><br><br><font color="#BEBE12">5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>mv /opt/temp/mantianyy.github.io.zip <font color="#FF4DBB">$DEPLOY_PATH</font></font><br><font color="#BEBE12">6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#BEBE12">unset <font color="#10A1EE">GIT_DIR</font></font><br>    <font color="#BEBE12">7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>cd $DEPLOY_PATH</font><br><font color="#BEBE12">8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>unzip <font color="#FF4DBB">-o</font> mantianyy.github.io.zip</font><br><font color="#BEBE12">9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font>rm <font color="#FF4DBB">-rf</font> mantianyy.github.io.zip</font><br>    <font color="#BEBE12">10&nbsp;&nbsp;&nbsp;</font><font>chown git:git <font color="#FF4DBB">-R <font color="#FF4DBB"></font>$DEPLOY_PATH</font></font><br><font color="#BEBE12">11&nbsp;&nbsp;&nbsp;</font><font>chown git:git <font color="#FF4DBB">-R $TEMP_PATH</font></font><br>    <font color="#BEBE12">12&nbsp;&nbsp;&nbsp;</font><font>echo <font color="#BEBE12">"</font><font color="#FF6060">post-receive successfully!</font><font color="#BEBE12">"</font> <font color="#BEBE12">&gt;</font> /opt/Desktop/Git/mantianyy.github.io.git/hooks/hook.log</font><br></div></li><li><p>2.6 授予post-receive可执⾏权限</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">chmod +x post-receive</font><br></div></li><li><p>2.7 检查脚本中涉及权限的命令</p><ul><li><p>mkdir、rm 等涉及权限问题</p><p>目录权限 <code>chown -R git:git [targetPath]</code> </p><p>这里的git:git 指的是Git服务器相关的权限</p></li></ul><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 10px 10px">    <p>「Git权限参考」<a style="color:#37f;" href="https://juejin.cn/post/7103138120849162277" target="_blank">https://juejin.cn/post/7103138120849162277</a></p></blockquote></li></ul></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之搭建Git服务器</title>
      <link href="/2022/11/25/Linux%E4%B9%8B%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/11/25/Linux%E4%B9%8B%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Git 版本&gt;1.8.3 </li></ul></li></ul></li><li><p><strong><font color="#4360DB">安装Git服务端</font></strong></p><ul><li><p>2.1 安装Git</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">yum install -y</font>&nbsp;&nbsp;git<br></div></li><li><p>2.2 查看版本号</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">git</font>&nbsp;&nbsp;--version<br></div></li><li><p>2.3 创建用户组&amp;用户</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">groupadd</font>&nbsp;&nbsp;git<font color="#990073">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建用户组git</font><br>    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">useradd&nbsp;&nbsp;-g</font>&nbsp;&nbsp;git git<font color="#990073">&nbsp;&nbsp;//创建用户git，并把git添加到用户组git</font><br>    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">passwd</font>&nbsp;&nbsp;git<font color="#990073">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//设置用户密码</font><br></div></li></ul></li><li><p><strong><font color="#4360DB">配置Git仓库</font></strong>  </p><ul><li><p>3.1 设置 /home/data/git/gittest.git 为Git仓库，然后把Git仓库的owner修改为git</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir -p </font>&nbsp;&nbsp;/home/git/data/git/gittest.git<font color="#990073">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><br>    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">git init --bare </font>&nbsp;data/git/gittest.git&nbsp;&nbsp;-g<font color="#990073">&nbsp;&nbsp;</font><br>    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font>Initialized empty Git repository in /home/data/git/gittest.git/</font><br>    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir -p </font>&nbsp;&nbsp;/home/git/data/git/gittest.git<font color="#990073">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><br>    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">cd data/git/</font>&nbsp;&nbsp;git<font color="#990073">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><br>    <font>[root@instance-32p89sex git]#&nbsp;&nbsp;</font><font color="#3300BB">chown&nbsp;&nbsp;-R&nbsp;</font>&nbsp;git:git&nbsp;&nbsp;gittest.git/<font color="#990073">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><br></div></li></ul></li><li><p><strong><font color="#4360DB">客户端测试</font></strong></p><ul><li><p>4.1 测试</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">git&nbsp;</font><font color="#0086b3">clone</font>&nbsp;git@<font color="teal">127.0.0.1</font><font color="#990073">:/home/data/gittest</font><font>.git</font><br></div></li><li><p>4.2 连接有提示</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>&nbsp;&nbsp;The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.</font><br>    <font>&nbsp;&nbsp;RSA key fingerprint is SHA256:Ve6WV/FGH059EqoUOERFoZdfmMh3B259nhkfmvdamkd.</font><br>    <font>&nbsp;&nbsp;Are you sure you want to continue connecting (yes/no)? </font><br></div><div>    <font style="font-size:15px;">输入yes即可，此时ssh下会多出一个文件known_hosts</font><br>    <font style="font-size:15px;">需要输入密码即可下载代码仓库，下面介绍采用SSH公钥来进行验证，代替每次输入密码</font><br></div></li><li><p>4.3 RAS认证</p><ul><li><p>修改sshd_config</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>RSAAuthentication <font color="#0086b3">yes</font></font><br>    <font>PubkeyAuthentication <font color="#0086b3">yes</font></font><br>    <font>AuthorizedKeysFile .ssh/authorized_keys</font><br></div></li><li><p>重启sshd服务</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">systemctrl sshd</font>&nbsp;restart<br></div></li><li><p>.ssh权限修改</p><div>    <font style="font-size:15px;">由 AuthorizedKeysFile 得知公钥的存放路径是 .ssh/authorized_keys，实际上是 $Home/.ssh/authorized_keys，由于管理Git服务的用户是git，所以实际存放公钥的路径是 /home/git/.ssh/authorized_keys</font><br></div><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font>    <font color="#0086b3">chown</font>&nbsp;<font>-R git:git &nbsp;.ssh</font></div></li></ul></li><li><p>4.4 客户端创建SSH公钥、私钥</p><div>    <font style="font-size:15px;">客户端如下命令执行:</font><br></div><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font>    <font>ssh-keygen -t rsa -C </font>    <font color="#d14"> "邮箱"</font></div><div>    <font style="font-size:15px;">此时 ~/.ssh 下会多出两个文件id_rsa和id_rsa.pub</font><br>    <font style="font-size:15px;">id_rsa 是私钥</font><br>    <font style="font-size:15px;">id_rsa.pub 是公钥</font><br></div></li><li><p>4.5 导入客户端公钥到Git服务端</p><ul><li>拷贝服务器至authorized_keys</li></ul><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font>    <font>ssh git@<font color="teal">127.0.0.1</font>&nbsp;<font color="#d14">'cat &gt;&gt; .ssh/authorized_keys'</font>     <font color="#009926">&lt; ~/.ssh/id_rsa.pub</font></font></div><div>    <font style="font-size:15px;">回到服务器端，查看.ssh下是否存在authorized_keys文件。</font><br></div></li><li><p>4.6 再次修改.ssh权限</p><ul><li>修改 .ssh 目录的权限为 700</li><li>.ssh/authorized_keys  文件的权限为 600</li></ul><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font><font color="#0086b3">chmod</font> 700 .ssh </font><br>    <font>cd .ssh</font><br>    <font><font color="#0086b3">chmod</font> 600 authorized_keys </font><br></div></li><li><p>4.7 无密码克隆测试</p><p><code>不需要再次输入密码</code></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@instance-32p89sex home]#&nbsp;&nbsp;</font><font color="#3300BB">git&nbsp;</font><font color="#0086b3">clone</font>&nbsp;git@<font color="teal">127.0.0.1</font><font color="#990073">:/home/data/gittest</font><font>.git</font><br></div></li></ul></li><li><p><strong><font color="#4360DB">禁止git用户ssh登录服务器</font></strong></p><ul><li><p>4.1 配置权限</p><ul><li><p>修改 /etc/passwd </p><p>找到这一行<code> git:x:502:504::/home/git:/bin/bash</code> 替换为下面这行</p><p><code>git:x:500:500::/home/git:/bin/bash-shell</code></p></li></ul><div>    <font style="font-size:15px;">此时git用户可以正常通过ssh使用git，但无法通过ssh登录系统。</font><br></div></li></ul><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 15px 15px">    <p>「参考文献」<a style="color:#37f;" href="https://juejin.cn/post/7103138120849162277" target="_blank">https://juejin.cn/post/7103138120849162277</a></p></blockquote></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务器安装SSL证书</title>
      <link href="/2022/11/24/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85SSL%E8%AF%81%E4%B9%A6/"/>
      <url>/2022/11/24/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85SSL%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Nginx &gt;1.14.1 (当前版本1.22.1)</li><li>SSL证书文件 <ul><li>cert-file-name.pem 密钥</li><li>cert-file-name.key  密钥键</li></ul></li></ul></li></ul></li><li><p><strong><font color="#4360DB">安装证书到服务器</font></strong></p><ul><li><p>2.1 安装Nginx</p><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 15px 15px">    <p>「上一篇文章详细讲述Nginx得环境搭建」<strong><a style="color:#37f;" href="https://mantianyy.github.io/mantianyy/2022/11/24/Linux%E4%B9%8BNginx%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank">安装Nginx</a></strong></p></blockquote></li><li><p>2.2 创建证书目录</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">cd</font>&nbsp;/usr/local/nginx/conf<br>    <font>[root@www ~]#&nbsp;&nbsp;</font><font color="#3300BB">mkdir</font>&nbsp;cert<br></div></li><li><p>2.3 手动上传 cert-file-name.key 、cert-file-name.pem文件至cert目录</p></li><li><p>2.4 配置文件内容修改</p><ul><li><code>yourdomain</code>：替换成证书绑定的域名</li><li><code>cert-file-name.pem</code>：替换成证书文件的名称</li><li><code>cert-file-name.key</code>：替换成私钥文件的名称</li></ul><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">#以下属性中，以ssl开头的属性表示与证书配置有关。</font><br>    <font color="#695d69">server {</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen 443 ssl;</font><br>    <font color="#3300BB">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#配置HTTPS的默认访问端口为443。</font><br>    <font color="#3300BB">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#如果您使用Nginx 1.15.0及以上版本，请使用listen 443 ssl代替listen 443和ssl on。</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name yourdomain;</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root html;</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index index.html index.htm;</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate cert/cert-file-name.pem;  </font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssl_certificate_key cert/cert-file-name.key; </font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssl_session_timeout 5m;</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</font><br>    <font color="#3300BB">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#表示使用的加密套件的类型。</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; </font><font color="#3300BB">#表示使用的TLS协议的类型，您需要自行评估是否配置TLSv1.1协议。</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssl_prefer_server_ciphers on;</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location / {</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root html;  #Web网站程序存放目录。</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index index.html index.htm;</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font><br>    <font color="#695d69">}</font><br></div></li></ul></li><li><p><strong><font color="#4360DB">设置HTTP请求自动跳转HTTPS</font>「<font color="#FBBC05">可选</font>」</strong>  </p><ul><li><p>3.1 如果您希望所有的HTTP访问自动跳转到HTTPS页面，则可以在需要跳转的HTTP站点下添加以下<code>rewrite</code>语句</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#695d69">server {</font><br>     <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listen 80;</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server_name yourdomain;</font><font color="#3300BB">#需要将yourdomain替换成证书绑定的域名。</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rewrite ^(.*)$ https://$host$1; </font><font color="#3300BB">#将所有HTTP请求通过rewrite指令重定向到HTTPS。</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;location / {</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index index.html index.htm;</font><br>    <font color="#695d69">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</font><br>    <font color="#695d69">}</font><br></div></li></ul><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 15px 15px">    <p>「详细请参考 阿里云」<strong><a style="color:#37f;" href="https://help.aliyun.com/document_detail/198938.html" target="_blank">安装证书</a></strong></p></blockquote></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之Nginx环境搭建</title>
      <link href="/2022/11/24/Linux%E4%B9%8BNginx%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/11/24/Linux%E4%B9%8BNginx%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求: <ul><li>Nginx &gt;1.14.1 (当前版本:1.22.1)</li></ul></li></ul></li><li><p><strong><font color="#4360DB">安装编译工具及库文件</font></strong></p><ul><li><p>2.1 安装依赖</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">&nbsp;&nbsp;yum -y install &nbsp;make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</font><br></div></li><li><p>2.2 安装PCRE</p><p>详细请参考</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;wget https://jaist.dl.sourceforge.net/project/pcre/pcre/8.42/pcre-8.42.tar.gz&nbsp;&nbsp;--no-check-certificate*</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;tar -xvf pcre-8.42.tar.gz</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;cd pcre-8.42 </font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;./configure</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;make &amp;&amp; make install</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;pcre-config &nbsp;--version</font><br></div></li></ul></li><li><p><strong><font color="#4360DB">安装nginx</font></strong></p><ul><li><p>3.1 下载</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;wget https://nginx.org/download/nginx-1.22.1.tar.gz</font><br></div></li><li><p>3.2 编译安装</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;tar -xvf pcre-1.22.1.tar.gz</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;cd pcre-8.42 </font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;./configure</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;make &amp;&amp; make install</font><br>    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;pcre-config &nbsp;--version</font><br></div></li><li><p>3.3 查看版本</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;/usr/local/webserver/nginx/sbin/nginx &nbsp;&nbsp;-v</font><br></div></li><li><p>3.4 常用命令</p><blockquote style="border-left: 8px solid #69f;border-radius: 8px;background-color: #f8fafc;padding: 15px 15px"><font color="#78C833">1.</font><font color="#3300BB">&nbsp;nginx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;启动</font><br>    <font color="#78C833">2.</font><font color="#3300BB">&nbsp;nginx&nbsp;-s&nbsp;&nbsp;reload&nbsp;&nbsp;重新载入配置文件</font><br>    <font color="#78C833">3.</font><font color="#3300BB">&nbsp;nginx&nbsp;-s&nbsp;&nbsp;reopen&nbsp;重启</font><br>    <font color="#78C833">4.</font><font color="#3300BB">&nbsp;nginx&nbsp;-s&nbsp;&nbsp;restop&nbsp;&nbsp;停止</font><br>    <font color="#78C833">5.</font><font color="#3300BB">&nbsp;nginx&nbsp;-t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        &nbsp;&nbsp;&nbsp;&nbsp;查看版本</font><br></blockquote></li><li><p>3.5 配置环境变量</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;vim&nbsp;&nbsp;/etc/profile</font><br></div><img src="https://i.imgur.com/UWx6tfP.png" alt="部署成功" style="zoom:100%;"></li><li><p>3.6 刷新环境变量</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;source&nbsp;&nbsp;/etc/profile</font><br></div></li><li><p>3.7 验证环境变量是否生效</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[root@www ~]#</font><font color="#3300BB">  &nbsp;nginx&nbsp;&nbsp;-v</font><br></div><img src="https://i.imgur.com/zT7ECNn.png" alt="部署成功" style="zoom:100%;"></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yapi环境搭建</title>
      <link href="/2022/11/21/Yapi%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/11/21/Yapi%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<ol><li><p><font color="#4360DB"><strong>环境准备</strong></font></p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统：Centos7</li><li><input checked="" disabled="" type="checkbox"> 环境要求:<ul><li>nodejs&gt;7.6</li><li>mongodb&gt;2.6</li><li>git</li></ul></li></ul></li><li><p><strong><font color="#4360DB">安装nodejs</font></strong></p><ul><li><p>2.1 下载node.js</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">curl -sL</font> https://rpm.nodesource.com/setup_8.x | <font color="#3300BB"> bash -</font></div></li><li><p>2.2 安装</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">yum install</font> -y nodejs</div></li><li><p>2.3 查看版本</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">node -v</font></div></li><li><p>2.4 查看npm版本</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">npm -v</font></div></li></ul></li><li><p><strong><font color="#4360DB">安装mongodb</font></strong></p><ul><li><p>3.1 更新yum源</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">yum -y update</font></div></li><li><p>3.2 添加mongodb源文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">touch</font>&nbsp;&nbsp;/etc/yum.repos.d/mongodb-org.repo</div></li><li><p>3.3 编辑mongodb-org.repo文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">vim</font>&nbsp;&nbsp;/etc/yum.repos.d/mongodb-org.repo</div></li><li><p>3.4 添加文件内容</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font>[mongodb-org]</font><br><br>    <font color="#3300BB">name=</font>MongoDB Repository<br>    <font color="#3300BB">baseurl=</font>http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.2/x86_64/<br>    <font color="#3300BB">gpgcheck=</font>0<br>    <font color="#3300BB">enabled=</font>1<br></div></li><li><p>3.5 安装mongodb</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">yum install -y</font>&nbsp;&nbsp;mongodb-org<br></div></li><li><p>3.6 启动mongodb</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">service mongod start</font></div></li><li><p>3.7 设置开机启动</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">chkconfig mongod on</font></div></li><li><p>3.8 配置远程访问</p><ul><li><p>3.8.1 修改mongod.conf配置文件</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">vim</font>&nbsp;&nbsp;/etc/mongod.conf</div></li><li><p>3.8.2 注释 bindIp: 127.0.0.1</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">#bindIp: 127.0.0.1</font></div></li><li><p>3.8.3 重启mongod</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">service mongod restart</font></div></li></ul></li></ul></li><li><p><font color="#4360DB"><strong>安装git</strong></font></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <font color="#3300BB">yum&nbsp;&nbsp;-y&nbsp;&nbsp;install&nbsp;&nbsp;git</font></div></li><li><p><font color="#4360DB"><strong>搭建Yapi环境</strong></font></p><ul><li><p>5.1 更新yum源</p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><font color="#3300BB">    npm&nbsp;&nbsp;install&nbsp;-g&nbsp; yapi-cli&nbsp; --registry &nbsp;</font><font color="rgba()">https://registry.npm.taobao.org</font><br>    <font color="#3300BB">yapi&nbsp;&nbsp;server</font></div><img src="https://i.imgur.com/4RTS4JZ.png" alt="实例信息" style="zoom:100%;"><img src="https://i.imgur.com/4rrMMvR.png" alt="启动服务器" style="zoom:100%;"></li><li><p>5.2 启动可视化部署程序</p><img src="https://i.imgur.com/XDmI9YQ.png" alt="启动服务器" style="zoom:100%;"></li><li><p>5.3 部署成功截图</p><img src="https://i.imgur.com/OVKSthX.png" alt="部署成功" style="zoom:100%;"></li><li><p>5.4 启动Yapi服务</p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><font color="#3300BB">node&nbsp;&nbsp;</font>vendors/server/app.js</div><p>访问Yapi地址 <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000</a> </p></li><li><p>5.5 pm2方式管理进程(可选)</p><ul><li><p>全局安装</p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><font color="#3300BB">npm install -g pm2</font></div></li><li><p>启动</p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><font color="#3300BB">cd</font>&nbsp;&nbsp;vendors<br><font color="#3300BB">pm2&nbsp;&nbsp;start</font>&nbsp;&nbsp;server/app.js&nbsp;&nbsp;--watch<br></div></li><li><p>重启</p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><font color="#3300BB">pm2&nbsp;&nbsp;restart</font>&nbsp;&nbsp;service/app.js</div></li><li><p>停止</p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><font color="#3300BB">pm2&nbsp;&nbsp;stop</font><font color="red">&nbsp;&nbsp;app_name|app_id</font></div><blockquote><p><a href="http://imweb.io/topic/57c8cbb27f226f687b365636">PM2</a> <a href="http://imweb.io/topic/57c8cbb27f226f687b365636">http://imweb.io/topic/57c8cbb27f226f687b365636</a></p></blockquote></li></ul></li></ul></li><li><p><font color="#EA4335"><strong>Yapi启动后,老是自动关闭问题</strong></font></p><ul><li><p>6.1 启动命令加上&amp;</p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><font color="#3300BB">node&nbsp;&nbsp;vendors/server/app.js</font></div></li><li><p>6.2 启动后 ctrl+c 回到命令行</p></li><li><p>6.3 输入exit退出，关闭xshell窗口</p></li><li><p>6.4 刷新 <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000</a>  看网站是否可以访问,如果页面显示正常,则服务启动成功.</p></li></ul></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux之搭建Docker环境</title>
      <link href="/2022/11/06/Linux%E4%B9%8B%E5%AE%89%E8%A3%85Docker%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/11/06/Linux%E4%B9%8B%E5%AE%89%E8%A3%85Docker%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">yum install docker -y</code></pre><p>如果报一下错误:</p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    Re: "Need to pass list of packages to install Mini usage" error in CentOS image creation using packer</div><pre class=" language-shell"><code class="language-shell">sudo yum list installed</code></pre><p>Docker程序常用命令</p><pre class=" language-shell"><code class="language-shell">service docker start #启动service docker stop #停止service docker restart #重启</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.docker.com/engine/reference/run/">Docker手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库类型对应Java类型参照表</title>
      <link href="/2022/11/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94Java%E7%B1%BB%E5%9E%8B%E5%8F%82%E7%85%A7%E8%A1%A8/"/>
      <url>/2022/11/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94Java%E7%B1%BB%E5%9E%8B%E5%8F%82%E7%85%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>其他数据库类型</th><th>MySQL数据库类型</th><th>Java数据类型</th></tr></thead><tbody><tr><td>VARCHAR</td><td>VARCHAR</td><td>java.lang.String</td></tr><tr><td>CHAR</td><td>CHAR</td><td>java.lang.String</td></tr><tr><td>BLOB</td><td>BLOB</td><td>java.lang.byte[]</td></tr><tr><td>TEXT</td><td>VARCHAR</td><td>java.lang.String</td></tr><tr><td>INTEGER</td><td>INTEGER UNSIGNED</td><td>java.lang.Long</td></tr><tr><td>TINYINT</td><td>TINYINT UNSIGNED</td><td>java.lang.Integer</td></tr><tr><td>SMALLINT</td><td>SMALLINT UNSIGNED</td><td>java.lang.Integer</td></tr><tr><td>MEDIUMINT</td><td>MEDIUMINT UNSIGNED</td><td>java.lang.Integer</td></tr><tr><td>BIT</td><td>BIT</td><td>java.lang.Boolean</td></tr><tr><td>BIGINT</td><td>BIGINT UNSIGNED</td><td>java.math.Biginteger</td></tr><tr><td>FLOAT</td><td>FLOAT</td><td>java.lang.Float</td></tr><tr><td>DOUBLE</td><td>DOUBLE</td><td>java.lang.Double</td></tr><tr><td>DECIMAL</td><td>DECIMAL</td><td>java.math.BigDecimal</td></tr><tr><td>BOOLEAN</td><td>TINYINT</td><td>java.lang.Integer</td></tr><tr><td>CHARACTER VARYING(M)</td><td>VARCHAR(M)</td><td>java.lang.String</td></tr><tr><td>BOOL</td><td>TINYINT</td><td>java.lang.Integer</td></tr><tr><td>FIXED</td><td>DECIMAL</td><td>java.math.BigDecimal</td></tr><tr><td>FLOAT4</td><td>FLOAT</td><td>java.lang.Float</td></tr><tr><td>FLOAT8</td><td>DOUBLE</td><td>java.lang.Double</td></tr><tr><td>INT1</td><td>TINYINT</td><td>java.lang.Integer</td></tr><tr><td>INT2</td><td>SMALLINT</td><td>java.lang.Integer</td></tr><tr><td>INT3</td><td>MEDIUMINT</td><td>java.lang.Integer</td></tr><tr><td>INT4</td><td>INT</td><td>java.lang.Integer</td></tr><tr><td>INT8</td><td>BIGINT</td><td>java.lang.Integer</td></tr><tr><td>LONG VARBINARY</td><td>MEDIUMBLOB</td><td>java.lang.byte[]</td></tr><tr><td>LONG VARCHAR</td><td>MEDIUMTEXT</td><td>java.lang.String</td></tr><tr><td>LONG</td><td>MEDIUMTEXT</td><td>java.lang.String</td></tr><tr><td>MIDDLEINT</td><td>MEDIUMINT</td><td>java.lang.Integer</td></tr><tr><td>NUMERIC</td><td>DECIMAL</td><td>java.math.BigDecimal</td></tr><tr><td>DATE</td><td>DATE</td><td>java.sql.Date</td></tr><tr><td>TIME</td><td>TIME</td><td>java.sql.Time</td></tr><tr><td>DATETIME</td><td>DATETIME</td><td>java.sql.Timestamp</td></tr><tr><td>TIMESTAMP</td><td>TIMESTAMP</td><td>java.sql.Timestamp</td></tr><tr><td>YEAR</td><td>YEAR</td><td>java.sql.Date</td></tr></tbody></table><blockquote><p>详细了解: bitint、int、smallint、tinyint的区别,查看官方手册</p></blockquote><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.oracle.com/cd/E19078-01/mysql/mysql-refman-5.1/">MySQL5.1手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emos云服务器清单</title>
      <link href="/2022/11/04/emos%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B8%85%E5%8D%95/"/>
      <url>/2022/11/04/emos%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>  由于需要发布小程序,需要买一些上云的主机,故需要采购一批云主机。还好,都是薅羊毛买来的,买来四台,<br>  目前有两台将要过期。不过还有两台明年到期。<br>  <strong>emos云服务器清单汇总</strong> 如下:</p><table><thead><tr><th>厂商</th><th>系统</th><th>服务器类型</th><th>参数</th><th>IP地址</th><th>账号</th><th>密码</th><th>到期时间</th><th>申请账号</th><th>备注</th></tr></thead><tbody><tr><td>百度云</td><td>Linux(Centos7)</td><td>Lighthouse</td><td>1核/1GB/40G/3Mbps</td><td>47.108.212.201</td><td>root</td><td>/</td><td>2023-05-27</td><td>*3086</td><td>手机尾号</td></tr><tr><td>百度云</td><td>Linux(Centos7)</td><td>Lighthouse</td><td>2核/8GB/100G/8Mbps</td><td>180.76.175.195</td><td>root</td><td>/</td><td>2022-11-15</td><td>*3086</td><td>手机尾号</td></tr><tr><td>百度云</td><td>Linux(Centos7)</td><td>计算型c4</td><td>2核/4GB/40G/1Mbps</td><td>106.12.112.138</td><td>root</td><td>/</td><td>2023-07-23</td><td>*4290</td><td>手机尾号</td></tr><tr><td>百度云</td><td>Linux(Centos7)</td><td>Lighthouse</td><td>1核/1GB/40G/3Mbps</td><td>182.61.43.202</td><td>root</td><td>/</td><td>2026-05-07</td><td>*4290</td><td>手机尾号</td></tr><tr><td>腾讯云</td><td>Linux(Centos7)</td><td>Lighthouse</td><td>2核/2GB/50G/4Mbps</td><td>124.223.143.117</td><td>root</td><td>/</td><td>2024-07-05</td><td>*1575</td><td>微信尾号</td></tr><tr><td>Ucloud</td><td>Linux(Centos7)</td><td>Lighthouse</td><td>2核/4GB/50G/40Mbps</td><td>101.36.116.31</td><td>root</td><td>/</td><td>2023-09-06</td><td>*@foxmail.com</td><td>邮箱尾号</td></tr><tr><td>华为云</td><td>Linux(Centos7)</td><td>HECS(云耀云服务器)</td><td>2核/4GB/40G/1Mbps</td><td>124.70.185.67</td><td>root</td><td>/</td><td>2024/08/20</td><td>*tian0820</td><td>账号尾号</td></tr><tr><td>华为云</td><td>Linux(Centos7)</td><td>HECS(云耀云服务器)</td><td>1核/2GB/40G/1Mbps</td><td>124.71.198.181</td><td>root</td><td>/</td><td>2024/08/20</td><td>*tian0820</td><td>账号尾号</td></tr><tr><td>华为云</td><td>Linux(Centos7)</td><td>HECS(云耀云服务器)</td><td>2核/4GB/40G/1Mbps</td><td>116.204.86.148</td><td>root</td><td>/</td><td>2023/09/20</td><td>*tian0820</td><td>账号尾号</td></tr><tr><td>亿速云</td><td>Linux(Centos8)</td><td>Lighthouse</td><td>2核/4GB/80G/1Mbps</td><td>154.209.4.222</td><td>root</td><td>/</td><td>2023-09-05</td><td>*3086</td><td>手机尾号</td></tr><tr><td>Microsoft Cloud</td><td>Linux(Centos7)</td><td>计算型</td><td>4核/8GB/100G/20Mbps</td><td>20.41.112.97</td><td>root</td><td>/</td><td>-</td><td>*@foxmail.com</td><td>100$可用额度</td></tr><tr><td>Google Cloud</td><td>Linux(Centos7)</td><td>计算型</td><td>4核/8GB/100G/10Mbps</td><td>104.197.222.34</td><td>root</td><td>/</td><td>-</td><td>*@gamil.com</td><td>120$可用额度</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emos系统权限汇总</title>
      <link href="/2022/11/04/emos%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E6%B1%87%E6%80%BB/"/>
      <url>/2022/11/04/emos%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="emos系统设计"><a href="#emos系统设计" class="headerlink" title="emos系统设计"></a>emos系统设计</h2><p>  前一段时间写一个小系统,但是后面都没有把权限加上去。于是,赶紧屁颠屁颠的把权限功能加上。害,还是<br>  要认真一点,把系统的权限大概整理一下吧。</p><p>  <strong>emos系统权限汇总</strong> 如下:</p><img src="https://i.imgtg.com/2022/11/04/RR4KC.jpg" alt="系统权限思维导图" style="zoom:100%;"> ]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境运行RabbitMQ端口修改</title>
      <link href="/2022/11/03/Docker%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8CRabbitMQ%E7%AB%AF%E5%8F%A3%E4%BF%AE%E6%94%B9/"/>
      <url>/2022/11/03/Docker%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8CRabbitMQ%E7%AB%AF%E5%8F%A3%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker环境运行RabbitMQ端口修改"><a href="#Docker环境运行RabbitMQ端口修改" class="headerlink" title="Docker环境运行RabbitMQ端口修改"></a>Docker环境运行RabbitMQ端口修改</h1><p>rabbitmq默认运行端口是5672，rabbitmq-management默认是15672 如果不想用默认的端口，可以自动更改。</p><pre class=" language-shell"><code class="language-shell">$ docker run -d --name your-rabbit-name -p port1:5672 -p port2:15672   rabbitmq:management</code></pre><blockquote><p><b><font color="orange">port1</font></b> 是rabbitmq运行的实际端口,  <b><font color="orange">port2</font></b>是rabbitmq-management运行的实际端口。</p></blockquote><p>详细文档,参考:<a href="https://registry.hub.docker.com/_/rabbitmq">https://registry.hub.docker.com/_/rabbitmq</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp之uni.getLocation无法获取定位</title>
      <link href="/2022/10/31/uniapp%E4%B9%8Buni.getLocation%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E5%AE%9A%E4%BD%8D/"/>
      <url>/2022/10/31/uniapp%E4%B9%8Buni.getLocation%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="uniapp之uni-getLocation无法获取定位"><a href="#uniapp之uni-getLocation无法获取定位" class="headerlink" title="uniapp之uni.getLocation无法获取定位"></a>uniapp之uni.getLocation无法获取定位</h1><p>1.修改manifest.json配置文件</p><img src="https://i.imgtg.com/2022/10/31/RiKBD.png" alt="" style="zoom:100%;"><p>2.配置权限</p><img src="https://i.imgtg.com/2022/10/31/RiZZF.png" alt="" style="zoom:100%;"><p>配置内容如下:</p><pre class=" language-json"><code class="language-json"><span class="token property">"mp-weixin"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"appid"</span> <span class="token operator">:</span> <span class="token string">"xxxxxxxx"</span><span class="token punctuation">,</span>//微信appid        <span class="token property">"setting"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"urlCheck"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"postcss"</span> <span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"usingComponents"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"permission"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"scope.userLocation"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"desc"</span> <span class="token operator">:</span> <span class="token string">"获取定位"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"requiredPrivateInfos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"getLocation"</span>        <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-其他</title>
      <link href="/2022/10/07/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E5%85%B6%E4%BB%96/"/>
      <url>/2022/10/07/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E5%85%B6%E4%BB%96/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-其他"><a href="#初级算法-其他" class="headerlink" title="初级算法-其他"></a>初级算法-其他</h1><ol><li><p><font color="rgba"><strong>位1的个数</strong></font></p><div>    编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。 <br><ul>    <li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>    <li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 <b>示例 3</b> 中，输入表示有符号整数 <code>-3</code></li></ul></div><div><br></div><p><strong>示例1：</strong></p>   <div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>00000000000000000000000000001011<br>   <b>输出：</b>3<br>   <b>解释：</b>输入的二进制串 00000000000000000000000000001011&nbsp;中，共有三位为 '1'。<br>   </div><div><br></div><p><strong>示例2：</strong></p>   <div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>00000000000000000000000010000000<br>   <b>输出：</b>1<br>   <b>解释：</b>输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。<br>   </div><div><br></div><p><strong>示例3：</strong></p>   <div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>11111111111111111111111111111101<br>   <b>输出：</b>31<br>   <b>解释：</b>输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。<br>   </div><div><br></div><p><strong>提示：</strong></p><ul><li>输入必须是长度为 <code>32</code> 的<b>二进制串</b></li></ul><p><strong>进阶：</strong>输入必须是长度为 <code>32</code> 的<b>二进制串</b></p><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li><li><p><strong><font color="rgba()">汉明距离</font></strong></p><div>两个整数之间的 汉明距离 指的是这两个数字对应二进制位不同的位置的数目。    给你两个整数 <code>x</code> 和 <code>y</code>，计算并返回它们之间的汉明距离。</div><div>    <br></div><p><strong>示例1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">  <b>输入：</b>x = 1, y = 4<br>  <b>输出：</b>1<br>  </div><div><br></div><p><strong>示例2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">      <b>输入：</b>x = 3, y = 1<br>      <b>输出：</b>2<br>      <b>解释：</b><br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1   (0 0 0 1)<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4   (0 1 0 0)<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;↑&nbsp;&nbsp;&nbsp;&nbsp;↑<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的箭头指出了对应二进制位不同的位置。<br></div><div><br></div><p> <strong>提示：</strong></p><ul><li><code>0 &lt;= x, y &lt;= 231 - 1</code></li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li></ol><ol start="3"><li><p><strong><font color="rgba()">颠倒二进制位</font></strong></p><div>    颠倒给定的 32 位无符号整数的二进制位。<br><br>    <b>提示：</b><br>    <ul>        <li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的</li>        <li>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fromtitle=%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81&amp;fromid=5295284" style="color:#D6C5CD">二进制补码</a>记法来表示有符号整数。因此，在 <b>示例2</b> 中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code></li>    </ul></div><div>    <br></div><p><strong>示例1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>n = 00000010100101000001111010011100<br>   <b>输出：</b>964176192 (00111001011110000010100101000000)<br>   <b>解释：</b>输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。<br>   </div><div><br></div><p><strong>示例2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>n = 11111111111111111111111111111101<br>   <b>输出：</b>3221225471 (10111111111111111111111111111111)<br>   <b>解释：</b>输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。<br>   </div><div><br></div><p><strong>提示：</strong></p><ul><li>输入是一个长度为 <code>32</code> 的二进制字符串</li></ul><p><strong>进阶：</strong></p><ul><li>如果多次调用这个函数，你将如何优化你的算法？</li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// you need treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li><li><p><font color="rgba()"><strong>杨辉三角</strong></font></p><div>给定一个非负整数 <code>numRows</code>，生成「杨辉三角」的前 <code>numRows</code> 行。在「杨辉三角」中，每个数是它左上方和右上方的数的和。<br>图片:请点击&nbsp;&nbsp;<a href="https://i.imgtg.com/2022/09/26/gj2xC.gif">杨辉三角运行图</a></div><div>    <br></div><p><strong>示例1：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>numRows = 5<br>   <b>输出：</b>[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]<br></div><div><br></div><p><strong>示例2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>numRows = 1<br>   <b>输出：</b>3221225471 (10111111111111111111111111111111)<br>   <b>解释：</b>[[1]]<br></div><div><br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= numRows &lt;= 30</code></li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li><li><p><font color="rgba()"><strong>有效的括号</strong></font></p><div>给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'{'</code>，<code>'}'</code>，<code>'['</code>，<code>']'</code> 的字符串 <code>s</code> ，判断字符串是否有效。<br>有效字符串需满足：<br><ul>    <li>1.左括号必须用相同类型的右括号闭合。 </li>    <li>2.左括号必须以正确的顺序闭合</li>    <li>3.每个右括号都有一个对应的相同类型的左括号。</li></ul></div><div>    <br></div><p><strong>示例1：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>head = [1,2,2,1]<br>   <b>输出：</b>true<br></div><div><br></div><p><strong>示例2：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>head = [1,2]<br>   <b>输出：</b>false<br></div><div><br></div><p><strong>示例3：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>输入：s = "(]"<br>   <b>输出：</b>false<br></div><div><br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code>仅由括号 <code>'()[]{}'</code> 组成</li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li><li><p><font color="rgba()"><strong>缺失数字</strong></font>  </p><div>    给定一个包含 <code>[0, n]</code> 中 <code>n</code> 个数的数组 <code>nums</code> ，找出 <code>[0, n]</code> 这个范围内没有出现在数组中的那个数。</div><div><br></div><p><strong>示例1：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>[3,0,1]<br>   <b>输出：</b>2<br>   <b>解释：</b>n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。<br></div><div><br></div><p><strong>示例2：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>[0,1]<br>   <b>输出：</b>2<br>   <b>解释：</b>n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。<br></div><div><br></div><p><strong>示例3：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>[9,6,4,2,3,5,7,0,1]<br>   <b>输出：</b>8<br>   <b>解释：</b>n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。<br></div><div><br></div><p><strong>示例 4：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">   <b>输入：</b>nums = [0]<br>   <b>输出：</b>1<br>   <b>解释：</b>n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。<br></div><div><br></div><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= n</code>。</li><li><code>nums</code> 中的所有数字都 <b>独一无二</b></li></ul><p><strong>提示：</strong>你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?</p><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-数字</title>
      <link href="/2022/10/06/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%95%B0%E5%AD%97/"/>
      <url>/2022/10/06/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-数组"><a href="#初级算法-数组" class="headerlink" title="初级算法-数组"></a>初级算法-数组</h1><ol><li><p><font color="rgba"><strong>Fizz Buzz</strong></font></p><div>    给你一个整数 n ，找出从 1 到 n 各个整数的 Fizz Buzz 表示，并用字符串数组 answer（下标从 1 开始）返回结果，其中：<br><br><ul>    <li><code>answer[i] == "FizzBuzz"</code>如果 <code>i</code> 同时是 <code>3</code> 和 <code>5</code> 的倍数。 </li>    <li><code>answer[i] == "Fizz"</code>如果 <code>i</code> 是 3 的倍数。</li>    <li><code>answer[i] == "Buzz"</code>如果 <code>i</code> 是 5 的倍数。</li>    <li><code>answer[i] == </code> （以字符串形式）如果上述条件全不满足。</li></ul></div><p><strong>示例 1：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[[[1, 2, 3]], [], [], []]<br>       <b>输出：</b>["1","2","Fizz"]<br></div><div>    <br></div><p><strong>示例 2：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 5<br>       <b>输出：</b>["1","2","Fizz","4","Buzz"]<br></div><div>    <br></div><p><strong>示例 3：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 15<br>       <b>输出：</b>["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]<br></div><div>    <br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">fizzBuzz</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li><li><p><strong><font color="rgba()">计数质数</font></strong></p><div>   给定整数 <b>n</b>,返回 所有小于非负整数 <code>n</code> 的质数的数量 。</div><div>    <br></div><p><strong>示例 1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 10<br>       <b>输出：</b>4<br>       <b>解释：</b>小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。<br></div><div>    <br></div><p><strong>示例 2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 0<br>       <b>输出：</b>0<br></div><div>    <br></div><p><strong>示例 3:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 1<br>       <b>输出：</b>0<br></div><div>    <br></div><p><strong>提示：</strong></p><ul><li> <code>0 &lt;= n &lt;= 5 * 106</code></li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong><font color="rgba()">3的幂</font></strong></p><div>    给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 <code>true</code>；否则，返回    <code>false</code>。整数<code>n</code>是3的幂次放需满足：存在整数<code>x</code>使得<code>n==x^2</code></div><div>    <br></div><p><strong>示例 1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 27<br>       <b>输出：</b>true<br></div><div>    <br></div><p><strong>示例 2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 0<br>       <b>输出：</b>false<br></div><div>    <br></div><p><strong>示例 3:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 9<br>       <b>输出：</b>true<br></div><div>    <br></div><p><strong>示例 4:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>n = 45<br>       <b>输出：</b>false<br></div><div>    <br></div><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= n &lt;= 231 - 1</code></li></ul><div>    <br></div><p><strong>进阶：</strong>你能不使用循环或者递归来完成本题吗？</p><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li><li><p><font color="rgba()"><strong>罗马数字转整数</strong></font></p><div>    罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。    <pre style="background:#F2F3F4;"><strong>字符</strong>          <strong>数值</strong>&nbsp;I             1&nbsp;V             5&nbsp;X             10&nbsp;L             50&nbsp;C             100&nbsp;D             500&nbsp;M             1000</pre>    例如， 罗马数字 <code>2</code> 写做&nbsp;II&nbsp;，即为两个并列的 1 。<code>12</code> 写做&nbsp;<code>XII</code>&nbsp;，即为&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。 <code>27</code> 写做&nbsp;&nbsp;<code>XXVII</code>, 即为&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;<code>IIII</code>，而是&nbsp;<code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;IX。这个特殊的规则只适用于以下六种情况：<br><ul>    <li><code>I</code>&nbsp;可以放在&nbsp;<code>V</code>&nbsp;(5) 和&nbsp;<code>X</code>&nbsp;(10) 的左边，来表示 4 和 9。</li>        <li><code>X</code>&nbsp;可以放在&nbsp;<code>L</code>&nbsp;(50) 和&nbsp;<code>C</code>&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp;</li>    <li><code>C</code>&nbsp;可以放在&nbsp;<code>D</code>&nbsp;(500) 和&nbsp;<code>M</code>&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。</li></ul>给定一个罗马数字，将其转换成整数。</div><div>    <br></div><p><strong>示例 1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>s = "III"<br>       <b>输出：</b>3<br></div><div>    <br></div><p><strong>示例 2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>s = "IV"<br>       <b>输出：</b>4<br></div><div>    <br></div><p><strong>示例 3:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>s = "IX"<br>       <b>输出：</b>9<br></div><div>    <br></div><p><strong>示例 4:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>s = "MCMXCIV"<br>       <b>输出：</b>58<br>       <b>解释：</b>L = 50, V= 5, III = 3.<br><div>    <br></div><p><strong>示例 5:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>s="MCMXCIV"<br>       <b>输出：</b>1994<br>       <b>解释：</b>M = 1000, CM = 900, XC = 90, IV = 4.<br><div>    <br></div><p><strong>提示：</strong></p><ul><li><p><code>1 &lt;= s.length &lt;= 15</code></p></li><li><p><code>s</code> 仅含字符 <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code></p></li><li><p>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code>内</p></li><li><p>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</p></li><li><p>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</p></li><li><p>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics </a>。</p></li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></div></div></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学-斐波那契数列</title>
      <link href="/2022/10/06/%E6%95%B0%E5%AD%A6-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2022/10/06/%E6%95%B0%E5%AD%A6-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="数学-斐波那契数列"><a href="#数学-斐波那契数列" class="headerlink" title="数学-斐波那契数列"></a>数学-斐波那契数列</h1><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><div>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;斐波那契数列是指的这样的一个数列，从第3项开始，以后每一项都等于前两项之和。写成递推公式即：</div><p>$$<br>a_n=a_{n-1} + a_{n-2}(n\geq3)<br>$$</p><div>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设令a1=1,a2=1，则斐波那契数列指的是这样的一串数：1,1,2,3,5,8,13,21,34,55,89,...</div><p>$$<br>证明：a_n=\frac{1}{\sqrt{5}}<br>         \left[<br>             \left(<br>                 \frac {\sqrt{5}+1} {2}<br>             \right)^{n}<br>             -<br>             \left(<br>                 \frac {\sqrt{5}-1} {2}<br>             \right)^{n}<br>         \right]<br>$$</p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先,我们来看看这样的一个题目:</div><p>$$<br>\begin{align}<br> 等差数列(a_n=a1+(n-1)\times d)和等比数列(a_n=r^{n-1}\times a_1)其中d为公差、r为公比<br>\end{align}<br>$$</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><h4 id="方法一-裂项构造法"><a href="#方法一-裂项构造法" class="headerlink" title="方法一:裂项构造法"></a>方法一:裂项构造法</h4><div>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;斐波那契数列的递推公式为</div><p>$$<br>a_n = a_{n-1}+a_{n-2}(n\geq3)<br>$$</p><div>    (1)&nbsp;&nbsp;由裂项构造方法可设</div><p>$$<br>a_n -\lambda a_{n-1} = \mu (a_{n-1}-\lambda a_{n-2})<br>$$</p><div>    (2)&nbsp;&nbsp;移项得</div><p>$$<br>\begin{cases}<br>    \lambda+\mu = 1<br>    \<br>    -\lambda \times \mu = 1<br>\end{cases}<br>$$</p><div>    (3)&nbsp;&nbsp;解得</div><img src="https://i.imgtg.com/2022/10/08/pH7Cg.png" alt="图1-2" style="zoom:100%;"><div>    (4)&nbsp;&nbsp;代入原式可得</div><img src="https://i.imgtg.com/2022/10/08/pHr4s.png" alt="图1-2" style="zoom:100%;"><div>    (5)&nbsp;&nbsp;化简方式</div><p>$$<br>\frac {1+\sqrt{5}} {2} \times \boldsymbol{\color{red}{①}} -   \frac {1-\sqrt{5}} {2} \times \boldsymbol{\color{lime}{②}}<br>$$</p><div>    (6)&nbsp;&nbsp;化简得</div><p>$$<br>a_n=\frac{1}{\sqrt{5}}<br>         \left[<br>             \left(<br>                 \frac {\sqrt{5}+1} {2}<br>             \right)^{n}<br>             -<br>             \left(<br>                 \frac {\sqrt{5}-1} {2}<br>             \right)^{n}<br>         \right]<br>$$</p><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-设计问题</title>
      <link href="/2022/10/05/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2022/10/05/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E8%AE%BE%E8%AE%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-设计问题"><a href="#初级算法-设计问题" class="headerlink" title="初级算法-设计问题"></a>初级算法-设计问题</h1><ol><li><p><font color="rgba"><strong>打乱数组</strong></font></p><div>给你一个整数数组 <code>nums</code> ，设计算法来打乱一个没有重复元素的数组。打乱后，数组的所有排列应该是&nbsp;<b>等可能</b>&nbsp;的。<br>实现 <code>Solution</code> class:<br>    <ul>        <li><code>Solution(int[] nums)</code> 使用整数数组 <code>nums</code> 初始化对象</li>        <li><code>int[] reset()</code> 重设数组到它的初始状态并返回</li>        <li><code>int[] shuffle()</code> 返回数组随机打乱后的结果</li>    </ul></div><div>    <br></div><p><strong>示例 1：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>["Solution", "shuffle", "reset", "shuffle"]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[[[1, 2, 3]], [], [], []]<br>       <b>输出：</b>[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]<br>       <b>解释：</b>Solution solution = new Solution([1, 2, 3]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution.shuffle();// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3,1,2]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution.reset();// 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution.shuffle();// 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]&nbsp;&nbsp;&nbsp;&nbsp;</div><div>    <br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 50</code></li><li><code>-106 &lt;= nums[i] &lt;= 106</code></li><li><code>nums</code> 中的所有元素都是 <b>唯一的</b></li><li>最多可以调用 <code>104</code> 次 <code>reset</code> 和 <code>shuffle</code></li></ul><div>    <br></div>**<font color="#FFB800">源码</font>:**<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> Random random<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>        random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//swap</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(nums); * int[] param_1 = obj.reset(); * int[] param_2 = obj.shuffle(); */</span></code></pre><div>    <br></div><blockquote><img src="https://i.imgtg.com/2022/10/11/p3Mut.png" alt="1-1运行结果" style="zoom:100%;"></blockquote><div>    <br></div></li><li><p><strong><font color="rgba()">最小栈</font></strong></p><div>    &nbsp;&nbsp;&nbsp;设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。<br>实现 <code>MinStack</code> 类:<br><ul>    <li><code>MinStack()</code>初始化堆栈对象。</li>    <li><code>void push(int val)</code> 将元素val推入堆栈。</li>    <li><code>void pop()</code> 删除堆栈顶部的元素。</li>    <li><code>int top()</code> 获取堆栈顶部的元素。</li>    <li><code>int getMin()</code> 获取堆栈中的最小元素。</li>    </ul></div><div>    <br></div><p><strong>示例 1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">       <b>输入：</b>["MinStack","push","push","push","getMin","pop","top","getMin"]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[[[1, 2, 3]], [], [], []]<br><br>       <b>输出：</b>[null,null,null,null,-3,null,0,-2]<br><br>       <b>解释：</b>Solution solution = new Solution([1, 2, 3]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MinStack minStack = new MinStack();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minStack.push(-2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minStack.push(0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minStack.push(-3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minStack.getMin();   --&gt; 返回 -3.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minStack.pop();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minStack.top();      --&gt; 返回 0.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minStack.getMin();   --&gt; 返回 -2.<br></div><div>    <br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 50</code></li><li><code>-106 &lt;= nums[i] &lt;= 106</code> </li><li><code>nums</code> 中的所有元素都是 <b>唯一的</b></li><li>最多可以调用 <code>104</code> 次 <code>reset</code> 和 <code>shuffle</code></li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack obj = new MinStack(); * obj.push(val); * obj.pop(); * int param_3 = obj.top(); * int param_4 = obj.getMin(); */</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-动态规划</title>
      <link href="/2022/10/04/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/10/04/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-动态规划"><a href="#初级算法-动态规划" class="headerlink" title="初级算法-动态规划"></a>初级算法-动态规划</h1><ol><li><p><font color="rgba"><strong>爬楼梯</strong></font></p><hr><div>    假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。<br>    每次你可以爬 <code>1</code> 或 <code>2</code>你有多少种不同的方法可以爬到楼顶呢？</div><div>    <br></div><p><strong>示例 1：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <b>输入：</b>n = 2<br>    <b>输出：</b>2<br>    <b>解释：</b>有两种方法可以爬到楼顶。<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 1 阶 + 1 阶<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 2 阶<br></div><div>    <br></div><p><strong>示例 2：</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <b>输入：</b>n = 3<br>    <b>输出：</b>3<br>    <b>解释：</b>有三种方法可以爬到楼顶。<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 1 阶 + 1 阶 + 1 阶<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 1 阶 + 2 阶<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. 2 阶 + 1 阶<br></div><div>    <br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/10/10/pXDac.png" alt="图1-1" style="zoom:100%;"></blockquote><div>    <br></div></li><li><p><strong><font color="rgba()">买卖股票的最佳时机</font></strong></p><hr><div>    给定一个数组 <code>prices</code> ，它的第&nbsp;<code>i</code> 个元素&nbsp;<code>prices[i]</code> 表示一支给定股票第 i 天的价格。    你只能选择 <b>某一天</b> 买入这只股票，并选择在 <b>未来的某一个不同的日子</b> 卖出该股票。设计一个算法来计算你所能获取的最大利润。    返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</div><div>    <br></div><p><strong>示例 1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><b>输入：</b>[7,6,4,3,1]<br><b>输出：</b>0<br><b>解释：</b>在这种情况下, 没有交易完成, 所以最大利润为 0。<br></div><div>    <br></div><p><strong>示例 2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;"><b>输入：</b>[7,1,5,3,6,4]<br><b>输出：</b>5<br><b>解释：</b>在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br></div><div>    <br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><div>    <br></div><p>  <strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li><li><p><strong><font color="rgba()">最大子序和</font></strong></p><hr><div style="font-size:15px;">    给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。    <b>子数组</b> 是数组中的一个连续部分</div><div>    <br></div><p><strong>示例 1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <b>输入：</b>[-2,1,-3,4,-1,2,1,-5,4]<br>    <b>输出：</b>6<br>    <b>解释：</b>连续子数组 [4,-1,2,1] 的和最大，为 6 。<br></div><div>    <br></div><p><strong>示例 2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <b>输入：</b>nums&nbsp;&nbsp;=&nbsp;&nbsp;[1]<br>    <b>输出：</b>1<br></div><div>    <br></div><p><strong>示例 3:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <b>输入：</b>nums&nbsp;&nbsp;=&nbsp;&nbsp;[5,4,-1,7,8]<br>    <b>输出：</b>23<br></div><div>    <br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><div>    <br></div><p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><div>    <br></div></li><li><p><font color="rgba()"><strong>打家劫舍</strong></font></p><hr><div style="font-size:15px;">你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<b>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</b>。<br><br>给定一个代表每个房屋存放金额的非负整数数组，计算你 <b>不触动警报装置的情况下</b> ，一夜之内能够偷窃到的最高金额</div><div>    <br></div><p><strong>示例 1:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <b>输入：</b>nums&nbsp;&nbsp;=&nbsp;&nbsp;[1,2,3,1]<br>    <b>输出：</b>4<br>    <b>解释：</b>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;偷窃到的最高金额 = 1 + 3 = 4 。<br></div><div>    <br></div><p><strong>示例 2:</strong></p><div style="background:#F2F3F4;padding:10px;font-size:15px;">    <b>输入：</b>nums&nbsp;&nbsp;=&nbsp;&nbsp;[2,7,9,3,1]<br>    <b>输出：</b>12<br>    <b>解释：</b>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;偷窃到的最高金额 = 2 + 9 + 1 = 12 。<br></div><div>    <br></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 400</code></li></ul><div>    <br></div><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-排序和搜索</title>
      <link href="/2022/10/03/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E5%92%8C%E6%90%9C%E7%B4%A2/"/>
      <url>/2022/10/03/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E5%92%8C%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-排序和搜索"><a href="#初级算法-排序和搜索" class="headerlink" title="初级算法-排序和搜索"></a>初级算法-排序和搜索</h1><ol><li><p><font color="rgba"><strong>合并两个有序数组</strong></font></p><hr><div>给你两个按 <b>非递减顺序</b> 排列的整数数组&nbsp;<code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 nums1 和 nums2 中的元素数目。请你 <b>合并</b> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <b>非递减顺序</b> 排列。<b>注意</b>：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m+n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</div>**示例 1：**<pre class=" language-text"><code class="language-text">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3输出：[1,2,2,3,5,6]解释：需要合并 [1,2,3] 和 [2,5,6] 。     合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：nums1 = [1], m = 1, nums2 = [], n = 0输出：[1]解释：需要合并 [1] 和 [] 。     合并结果是 [1] 。</code></pre><p><strong>示例 3：</strong></p><pre class=" language-text"><code class="language-text">输入：nums1 = [0], m = 0, nums2 = [1], n = 1输出：[1]解释：需要合并的数组是 [] 和 [1] 。     合并结果是 [1] 。     注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</code></pre><p><strong>提示：</strong></p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li></ul><p><strong>进阶：</strong>你可以设计实现一个时间复杂度为 <code>O(m + n)</code> 的算法解决此问题吗？</p><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/10/06/pFTrX.png" alt="1-1运行结果" style="zoom:150%;"></blockquote></li><li><p><strong><font color="rgba()">第一个错误的版本</font></strong></p><hr><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 <code>n</code> 个版本 <code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用&nbsp;<code>bool isBadVersion(version)</code>&nbsp;接口来判断版本号 <code>version</code> 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入：n = 5, bad = 4输出：4解释：    调用 isBadVersion(3) -> false     调用 isBadVersion(5)&nbsp;-> true     调用 isBadVersion(4)&nbsp;-> true    所以，4 是第一个错误的版本。</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入：n = 1, bad = 1输出：1</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= bad &lt;= n &lt;= 231 - 1</code></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* The isBadVersion API is defined in the parent class VersionControl.      boolean isBadVersion(int version); */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token keyword">extends</span> <span class="token class-name">VersionControl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start<span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                start<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                end <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/10/06/pFUQt.png" alt="1-2运行结果" style="zoom:150%;"></blockquote></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-树</title>
      <link href="/2022/10/02/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%A0%91/"/>
      <url>/2022/10/02/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-树"><a href="#初级算法-树" class="headerlink" title="初级算法-树"></a>初级算法-树</h1><ol><li><p><font color="rgba"><strong>二叉树的最大深度</strong></font></p><hr><div>    给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<br><b>说明:</b> 叶子节点是指没有子节点的节点。</div>**示例：**<div>    给定二叉树 <code>[3,9,20,null,null,15,7]</code></div><pre class=" language-text"><code class="language-text">    3   / \  9  20    /  \   15   7</code></pre><p>返回它的最大深度 3 。</p><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() {} *     TreeNode(int val) { this.val = val; } *     TreeNode(int val, TreeNode left, TreeNode right) { *         this.val = val; *         this.left = left; *         this.right = right; *     } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token operator">==</span>null<span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/10/05/p5eQF.png" alt="1-1运行结果" style="zoom:100%;"></blockquote></li><li><p><strong><font color="rgba()">验证二叉搜索树</font></strong></p><hr><div>    给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。<br><br>    <b>有效</b> 二叉搜索树定义如下：    <ul>        <li>节点的左子树只包含 小于 当前节点的数。</li>            <li>节点的右子树只包含 大于 当前节点的数。</li>            <li>所有左子树和右子树自身必须也是二叉搜索树。</li>        </ul></div>**示例 1:**<img src="https://i.imgtg.com/2022/09/25/gdlbx.png" alt="2-1运行结果" style="zoom:100%;"><pre class=" language-java"><code class="language-java">输入：root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token boolean">true</span></code></pre><p> <strong>示例 2:</strong></p><img src="https://i.imgtg.com/2022/09/25/gd9gj.png" alt="3-2运行结果" style="zoom:100%;"><pre class=" language-text"><code class="language-text">输入：root = [5,1,4,null,null,3,6]输出：false解释：根节点的值是 5 ，但是右子节点的值是 4 。</code></pre><p><strong>提示:</strong></p><ul><li>树中节点数目范围在<code>[1, 104]</code> 内</li><li><code>-231 &lt;= Node.val &lt;= 231 - </code>1</li></ul><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() {} *     TreeNode(int val) { this.val = val; } *     TreeNode(int val, TreeNode left, TreeNode right) { *         this.val = val; *         this.left = left; *         this.right = right; *     } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span>TreeNode min<span class="token punctuation">,</span>TreeNode max<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> min<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">>=</span> max<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>min<span class="token punctuation">,</span>root<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/10/05/p5r36.png" alt="2-1运行结果" style="zoom:100%;"></blockquote></li></ol><ol start="3"><li><p><strong><font color="rgba()">对称二叉树</font></strong></p><hr><div>    给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</div>**示例 1:**<img src="https://i.imgtg.com/2022/09/25/gd6qU.png" alt="3-1运行结果" style="zoom:100%;"><pre class=" language-text"><code class="language-text">输入：root = [1,2,2,3,4,4,3]输出：true</code></pre><p><strong>示例 2:</strong></p><img src="https://i.imgtg.com/2022/09/25/gd8rY.png" alt="3-2运行结果" style="zoom:100%;"><pre class=" language-text"><code class="language-text">输入：root = [1,2,2,null,3,null,3]输出：false</code></pre><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode left<span class="token punctuation">,</span> TreeNode right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> null <span class="token operator">||</span> right <span class="token operator">==</span> null <span class="token operator">||</span> left<span class="token punctuation">.</span>val <span class="token operator">!=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>提示:</strong></p><ul><li>树中节点数目范围在<code>[1, 1000]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100 </code></li></ul><p><strong>进阶：</strong>你可以运用递归和迭代两种方法解决这个问题吗？</p><blockquote><img src="https://i.imgtg.com/2022/10/05/p5KiP.png" alt="2-1运行结果" style="zoom:100%;"></blockquote></li><li><p><font color="rgba()"><strong>二叉树的层序遍历</strong></font></p><hr><div>    给你二叉树的根节点 <code>root</code> ，返回其节点值的 <b>层序遍历</b> 。 （即逐层地，从左到右访问所有节点）</div>**示例 1:**<img src="https://i.imgtg.com/2022/09/25/gdC4r.png" alt="3-2运行结果" style="zoom:150%;"><pre class=" language-text"><code class="language-text">输入：root = [3,9,20,null,null,15,7]输出：[[3],[9,20],[15,7]]</code></pre><p> <strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入：root = [1]输出：[[1]]</code></pre><p> <strong>示例 3:</strong></p><pre class=" language-text"><code class="language-text">输入：root = []输出：[]</code></pre><p><strong>提示：</strong></p><ul><li><p>树中节点数目在范围   <code>[0, 2000]</code> 内</p></li><li><p><code>-1000 &lt;= Node.val &lt;= 1000</code></p></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() {} *     TreeNode(int val) { this.val = val; } *     TreeNode(int val, TreeNode left, TreeNode right) { *         this.val = val; *         this.left = left; *         this.right = right; *     } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>TreeNode tree<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">>=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> subList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            subList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/10/05/p5Z4b.png" alt="2-1运行结果" style="zoom:100%;"></blockquote></li></ol><p>​       </p><ol start="5"><li><p><font color="rgba()"><strong>将有序数组转换为二叉搜索树</strong></font></p><hr><div>给你一个整数数组 <code>nums</code> ，其中元素已经按 <b>升序</b> 排列，请你将其转换为一棵 <b>高度平衡</b> 二叉搜索树。<br><b>高度平衡</b> 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</div><p><strong>示例 1：</strong></p><img src="https://i.imgtg.com/2022/09/25/gsTQ6.png" alt="5-1示例" style="zoom:150%;">   <div style="background:#F5F6F7">       输入：nums = [-10,-3,0,5,9] <br>       输出：[0,-3,9,-10,null,5] <br>       解释：[0,-10,5,null,-3,null,9] &nbsp;&nbsp;也将被视为正确答案：<br>       <img src="https://i.imgtg.com/2022/09/25/gsObG.png" alt="5-2运行结果" style="zoom:150%;">   </div><p><strong>示例 2：</strong></p><img src="https://i.imgtg.com/2022/09/25/gsBAF.png" alt="3-2运行结果" style="zoom:150%;"><pre class=" language-text"><code class="language-text">输入：head = [1,2]输出：false</code></pre><p> <strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[1, 105]</code>内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li></ul><p>   <strong>进阶：</strong></p><ul><li>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> TreeNode <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> TreeNode <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>     TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> root<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/10/05/p5v2l.png" alt="2-1运行结果" style="zoom:100%;"></blockquote></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-链表</title>
      <link href="/2022/09/25/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/09/25/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-链表"><a href="#初级算法-链表" class="headerlink" title="初级算法-链表"></a>初级算法-链表</h1><ol><li><p><font color="rgba"><strong>删除链表中的节点</strong></font></p><pre class=" language-text"><code class="language-text">有一个单链表的&nbsp;head，我们想删除它其中的一个节点&nbsp;node。给你一个需要删除的节点&nbsp;node&nbsp;。你将&nbsp;无法访问&nbsp;第一个节点&nbsp;&nbsp;head。链表的所有值都是 唯一的，并且保证给定的节点&nbsp;node&nbsp;不是链表中的最后一个节点。删除给定的节点。注意：删除节点并不是指从内存中删除它。这里的意思是：给定节点的值不应该存在于链表中。    ● 链表中的节点数应该减少 1。    ● node&nbsp;前面的所有值顺序相同。    ● node&nbsp;后面的所有值顺序相同。自定义测试：    ● 对于输入，你应该提供整个链表&nbsp;head&nbsp;和要给出的节点&nbsp;node。node&nbsp;不应该是链表的最后一个节点，而应该是链表中的一个实际节点。    ● 我们将构建链表，并将节点传递给你的函数。    ● 输出将是调用你函数后的整个链表。</code></pre><img src="https://i.imgtg.com/2022/09/27/gIkDj.jpg" alt="图1-1" style="zoom:100%;"><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：head = [4,5,1,9], node = 5输出：[4,1,9]解释：指定链表中值为&nbsp;5&nbsp;的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9</code></pre><img src="https://i.imgtg.com/2022/09/27/gIx8p.jpg" alt="图1-2" style="zoom:100%;"><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：head = [4,5,1,9], node = 1输出：[4,5,9]解释：指定链表中值为&nbsp;1&nbsp;的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9</code></pre><p><strong>提示：</strong></p><ul><li><p><code>链表中节点的数目范围是 [2, 1000]</code></p></li><li><p><code>-1000 &lt;= Node.val &lt;= 1000</code></p></li><li><p>链表中每个节点的值都是 唯一 的</p></li><li><p>需要删除的节点 node 是 链表中的节点 ，且 不是末尾节点</p></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/09/27/gI4Mg.png" alt="图1-2" style="zoom:100%;"></blockquote></li><li><p><strong><font color="rgba()">删除链表的倒数第N个节点</font></strong></p><div>    给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。<br></div><img src="https://i.imgtg.com/2022/09/27/gIFxU.jpg" alt="图2-1" style="zoom:150%;"><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入：head = [1,2,3,4,5], n = 2输出：[1,2,3,5]</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入：head = [1], n = 1输出：[]</code></pre><p><strong>示例 3:</strong></p><pre class=" language-text"><code class="language-text">输入：head = [1,2], n = 1输出：[1]</code></pre><p><strong>提示：</strong></p><ul><li><p>链表中结点的数目为 <code>sz</code></p></li><li><p><code>1 &lt;= sz &lt;= 30</code></p></li><li><p><code>0 &lt;= Node.val &lt;= 100</code></p></li><li><p><code>1 &lt;= n &lt;= sz</code></p></li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">-</span> n<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>last<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>last<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/09/27/gID7B.png" alt="图1-2" style="zoom:100%;"></blockquote></li><li><p><strong><font color="rgba()">反转链表</font></strong></p><div>    给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。<br></div><img src="https://i.imgtg.com/2022/09/27/gIR0l.jpg" alt="图3-1" style="zoom:150%;"><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入：head = [1,2,3,4,5]输出：[5,4,3,2,1]</code></pre><img src="https://i.imgtg.com/2022/09/27/gIKH1.jpg" alt="图3-2" style="zoom:150%;"><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入：head = [1,2]输出：[2,1]</code></pre><p><strong>示例 3:</strong></p><pre class=" language-text"><code class="language-text">输入：head = []输出：[]</code></pre><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>进阶：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.将链表保存至栈</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.一一取出</span>        ListNode node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode newHeader <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ListNode temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 尾节点置空防止成为环</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> newHeader<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/09/27/gIHHs.png" alt="图1-2" style="zoom:100%;"></blockquote></li><li><p><font color="rgba()"><strong>合并两个有序链表</strong></font></p><div>    将两个升序链表合并为一个新的 <b>升序</b> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</div><p><strong>示例 1:</strong></p><img src="https://i.imgtg.com/2022/09/27/gIKH1.jpg" alt="图4-1" style="zoom:150%;"><pre class=" language-text"><code class="language-text">输入：l1 = [1,2,4], l2 = [1,3,4]输出：[1,1,2,3,4,4]</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入：l1 = [], l2 = []输出：[]</code></pre><p><strong>示例 3:</strong></p><pre class=" language-text"><code class="language-text">输入：l1 = [], l2 = [0]输出：[0]</code></pre><p><strong>提示：</strong></p><ul><li><p>两个链表的节点数目范围是 <code>[0, 50]</code></p></li><li><p><code>-100 &lt;= Node.val &lt;= 100</code></p></li><li><p><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</p></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode list1<span class="token punctuation">,</span> ListNode list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> list2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list2<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> list1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode curr <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>list1<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>list2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>val<span class="token operator">>=</span>list2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                curr<span class="token punctuation">.</span>next <span class="token operator">=</span> list2<span class="token punctuation">;</span>                list2 <span class="token operator">=</span> list2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                curr<span class="token punctuation">.</span>next <span class="token operator">=</span> list1<span class="token punctuation">;</span>                list1 <span class="token operator">=</span> list1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span>list1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> list2 <span class="token operator">:</span> list1<span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/09/27/gILXK.png" alt="图1-2" style="zoom:100%;"></blockquote></li><li><p><font color="rgba()"><strong>回文链表</strong></font></p><div>    给你一个单链表的头节点 <code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</div><br><p><strong>示例 1：</strong></p><img src="https://i.imgtg.com/2022/09/27/gIgJF.jpg" alt="图5-1" style="zoom:150%;"><pre class=" language-text"><code class="language-text">输入：head = [1,2,2,1]输出：true</code></pre><p><strong>示例 2：</strong></p><img src="https://i.imgtg.com/2022/09/27/gIZ8I.jpg" alt="图2-1" style="zoom:150%;"><pre class=" language-text"><code class="language-text">输入：head = [1,2]输出：false</code></pre><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[1, 10^5]</code>内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li></ul><p><strong>进阶：</strong></p><ul><li>你能否用 <code>O(n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度解决此题？</li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">,</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        slow <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slow<span class="token punctuation">.</span>val <span class="token operator">!=</span> fast<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/09/27/gIGza.png" alt="图1-2" style="zoom:100%;"></blockquote></li><li><p><font color="rgba()"><strong>环形链表</strong></font>  </p><div>    给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。<br><br>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<b>注意：</b><code>pos</code> <b>不作为参数进行传递</b>&nbsp;。仅仅是为了标识链表的实际情况。<br><br>如果链表中存在环&nbsp;，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。<br></div><p><strong>示例 1：</strong></p><img src="https://i.imgtg.com/2022/09/27/gImf6.png" alt="图6-1" style="zoom:150%;"><pre class=" language-text"><code class="language-text">输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。</code></pre><p><strong>示例 2：</strong></p><img src="https://i.imgtg.com/2022/09/27/gIJBP.png" alt="图6-2" style="zoom:150%;"><pre class=" language-text"><code class="language-text">输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。</code></pre><p><strong>示例 3：</strong></p><img src="https://i.imgtg.com/2022/09/27/gIPZb.png" alt="图6-3" style="zoom:150%;"><pre class=" language-text"><code class="language-text">输入：head = [1], pos = -1输出：false解释：链表中没有环。</code></pre><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 [0, 104]</li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li>pos 为 -1 或者链表中的一个 有效索引 。</li></ul><p><strong>进阶：</strong></p><ul><li>你能用 O(1)（即，常量）内存解决此问题吗？</li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { *         val = x; *         next = null; *     } * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ListNode fast <span class="token operator">=</span> head<span class="token punctuation">,</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>slow<span class="token operator">==</span>fast<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><img src="https://i.imgtg.com/2022/09/27/gIQJS.png" alt="图1-2" style="zoom:100%;"></blockquote></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-字符串</title>
      <link href="/2022/09/24/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/09/24/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-数组"><a href="#初级算法-数组" class="headerlink" title="初级算法-数组"></a>初级算法-数组</h1><ol><li><p><font color="rgba"><strong>反转字符串</strong></font></p><pre class=" language-text"><code class="language-text">编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</code></pre><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：s = ["h","e","l","l","o"]输出：["o","l","l","e","h"]</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：s = ["H","a","n","n","a","h"]输出：["h","a","n","n","a","H"]</code></pre><img src="https://i.imgtg.com/2022/09/24/gQyLM.png" alt="1-1运行结果" style="zoom:150%;"><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s[i]</code> 都是 <a href="https://baike.baidu.com/item/ASCII">ASCII</a> 码表中的可打印字符</li></ul><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end<span class="token operator">=</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>end<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong><font color="rgba()">整数反转</font></strong></p><pre class=" language-text"><code class="language-text">给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围&nbsp;[−231,&nbsp; 231&nbsp;− 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）。</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入：x = 123输出：321</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入：x = -123输出：-321</code></pre><p><strong>示例 3:</strong></p><pre class=" language-text"><code class="language-text">输入：x = 120输出：21</code></pre><p><strong>示例 4:</strong></p><pre class=" language-text"><code class="language-text">输入：x = 0输出：0</code></pre><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newRes <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>t<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数值溢出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newRes<span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">!=</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> newRes<span class="token punctuation">;</span>            x<span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/24/gQgXG.png" alt="1-2运行结果" style="zoom:150%;"></li><li><p><strong><font color="rgba()">字符串中的第一个唯一字符</font></strong></p><pre class=" language-text"><code class="language-text">给定一个字符串 s ，找到 它的第一个不重复的字符，并返回它的索引 。如果不存在，则返回 -1 。</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入: s = "leetcode"输出: 0</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入: s = "loveleetcode"输出: 2</code></pre><p><strong>示例 3:</strong></p><pre class=" language-text"><code class="language-text">输入: s = "aabb"输出: -1</code></pre><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s</code> 只包含小写字母</li></ul><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> key <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/24/gQpz1.png" alt="1-3运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>有效的字母异位词</strong></font></p><pre class=" language-t**ext"><code class="language-t**ext">给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。注意：若&nbsp;s 和 t&nbsp;中每个字符出现的次数都相同，则称&nbsp;s 和 t&nbsp;互为字母异位词</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入: s = "anagram", t = "nagaram"输出: true</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入: s = "rat", t = "car"输出: false</code></pre><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li><li><code>s</code> 和 <code>t</code> 仅包含小写字母</li></ul><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> letterCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//统计字符串s中的每个字符的数量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            letterCount<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//减去字符串t中的每个字符的数量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果当前字符等于0，直接返回false，</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>letterCount<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            letterCount<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/24/gQJJI.png" alt="1-4运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>实现 strStr()</strong></font></p><pre class=" language-text"><code class="language-text">给你两个字符串&nbsp;haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果&nbsp;needle 不是 haystack 的一部分，则返回&nbsp; -1 。</code></pre><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：haystack = "sadbutsad", needle = "sad"输出：0解释："sad" 在下标 0 和 6 处匹配。第一个匹配项的下标是 0 ，所以返回 0 。</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：haystack = "leetcode", needle = "leeto"输出：-1解释："leeto" 没有在 "leetcode" 中出现，所以返回 -1 。</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= haystack.length, needle.length &lt;= 104</code></li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span>String haystack<span class="token punctuation">,</span> String needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> s1Len<span class="token operator">=</span>haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s2Len<span class="token operator">=</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**注意s1Len长度不能比其子串长度短,最多相等**/</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s1Len<span class="token operator">&lt;</span>s2Len<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s1Len<span class="token operator">-</span>s2Len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s2Len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">!=</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>s2Len<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/24/gQPlD.png" alt="1-5运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>外观数列</strong></font>  </p><pre class=" language-text"><code class="language-text">给定一个正整数 n ，输出外观数列的第 n 项。「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。你可以将其视作是由递归公式定义的数字字符串序列：countAndSay(1) = "1"countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。前五项如下：    1.     1    2.     11    3.     21    4.     1211    5.     111221    第一项是数字 1     描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 "11"    描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 "21"    描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 "1211"    描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 "111221"</code></pre><pre class=" language-text"><code class="language-text">要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。例如，数字字符串 "3322251" 的描述如下图：</code></pre><img src="https://i.imgtg.com/2022/09/24/gQnxj.png" alt="字符串示例" style="zoom:150%;"><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：n = 1输出："1"解释：这是一个基本样例</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：n = 4输出："1211"解释：countAndSay(1) = "1"countAndSay(2) = 读 "1" = 一 个 1 = "11"countAndSay(3) = 读 "11" = 二 个 1 = "21"countAndSay(4) = 读 "21" = 一 个 2 + 一 个 1 = "12" + "11" = "1211"</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 30</code></li></ul><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> String <span class="token function">countAndSay</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"1"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String s <span class="token operator">=</span> <span class="token function">countAndSay</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">statistics</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">statistics</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        StringBuffer result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> local<span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>local<span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                local<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>local<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/24/gQtTF.png" alt="1-6运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>最长公共前缀</strong></font>  </p><pre class=" language-text"><code class="language-text">编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 ""。</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入：strs = ["flower","flow","flight"]输出："fl"</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入：strs = ["dog","racecar","car"]输出：""解释：输入不存在公共前缀。</code></pre><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.扫描获取最短长度字符串</span>        <span class="token keyword">int</span> minLen<span class="token operator">=</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>minLen<span class="token punctuation">)</span><span class="token punctuation">{</span>                 minLen<span class="token operator">=</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.前缀扫描相同则保存</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>minLen<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>strs<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>strs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/24/gQ4Z6.png" alt="1-7运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>验证回文串</strong></font>  </p><pre class=" language-text"><code class="language-text">如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 回文串 。字母和数字都属于字母数字字符。给你一个字符串 s，如果它是 回文串 ，返回 true ；否则，返回 false </code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入: s = "A man, a plan, a canal: Panama"输出：true解释："amanaplanacanalpanama" 是回文串。</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入: s = "A man, a plan, a canal: Panama"输出：true解释："amanaplanacanalpanama" 是回文串。</code></pre><p><strong>示例 3：</strong></p><pre class=" language-text"><code class="language-text">输入：s = " "输出：true解释：在移除非字母数字字符之后，s 是一个空字符串 "" 。由于空字符串正着反着读都一样，所以是回文串</code></pre><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**循环将非数字和英文过滤**/</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;</span><span class="token operator">!</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/24/gQDcP.png" alt="1-8运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><em>字符串转换整数 (atoi)</em></font>  </p><pre class=" language-text"><code class="language-text">请你来实现一个&nbsp;myAtoi(string s)&nbsp;函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。函数&nbsp;myAtoi(string s) 的算法如下：1. 读入字符串并丢弃无用的前导空格2. 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。3. 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。4. 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。5. 如果整数数超过 32 位有符号整数范围 [−231,&nbsp; 231&nbsp;− 1] ，需要截断这个整数，使其保持在这个范围内。   具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231&nbsp;− 1 的整数应该被固定为 231&nbsp;− 1 。6. 返回整数作为最终结果。注意：    本题中的空白字符只包括空格字符 ' ' 。    除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入：s = "42"输出：42解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。第 1 步："42"（当前没有读入字符，因为没有前导空格）         ^第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）         ^第 3 步："42"（读入 "42"）           ^解析得到整数 42 。由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：s = "   -42"输出：-42解释：第 1 步："   -42"（读入前导空格，但忽视掉）            ^第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）             ^第 3 步："   -42"（读入 "42"）               ^解析得到整数 -42 。由于 "-42" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。</code></pre><p><strong>示例 3：</strong></p><pre class=" language-text"><code class="language-text">输入：s = "4193 with words"输出：4193解释：第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）         ^第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）         ^第 3 步："4193 with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）             ^解析得到整数 4193 。由于 "4193" 在范围 [-231, 231 - 1] 内，最终结果为 4193 。</code></pre><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 200</code></li><li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>' '</code>、<code>'+'</code>、<code>'-'</code> 和 <code>'.'</code> 组成</li></ul><p><strong><font color="red">源码</font>:</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'+'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> symbol <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>symbol <span class="token operator">&amp;&amp;</span> result <span class="token operator">></span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>symbol <span class="token operator">&amp;&amp;</span> result <span class="token operator">></span> 1L <span class="token operator">+</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">+</span> 1L<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> symbol <span class="token operator">?</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> result <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/24/gcfdF.png" alt="1-9运行结果" style="zoom:150%;"></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初级算法-数组</title>
      <link href="/2022/09/19/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/"/>
      <url>/2022/09/19/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="初级算法-数组"><a href="#初级算法-数组" class="headerlink" title="初级算法-数组"></a>初级算法-数组</h1><ol><li><p><font color="rgba"><strong>删除排序数组中的重复项</strong></font></p><pre class=" language-text"><code class="language-text">给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么&nbsp;nums&nbsp;的前 k 个元素应该保存最终结果。将最终结果插入&nbsp;nums 的前 k 个位置后返回 k 。不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</code></pre><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：nums = [1,1,2]输出：2, nums = [1,2,_]解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：nums = [0,0,1,1,1,2,2,3,3,4]输出：5, nums = [0,1,2,3,4]解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>提示：</strong></p><ul><li><p><code>1 &lt;= nums.length &lt;= 3 * 104</code></p></li><li><p><code>-104 &lt;= nums[i] &lt;= 104</code></p></li><li><p><code>nums</code> 已按 <strong>升序</strong> 排列</p></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                right<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yI0W6.png" alt="1-1运行结果" style="zoom:150%;"></li><li><p><strong><font color="rgba()">旋转数组</font></strong></p><pre class=" language-text"><code class="language-text">给你一个数组，将数组中的元素向右轮转 `k` 个位置，其中 `k` 是非负数。</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入: nums = [1,2,3,4,5,6,7], k = 3输出: [5,6,7,1,2,3,4]解释:向右轮转 1 步: [7,1,2,3,4,5,6]向右轮转 2 步: [6,7,1,2,3,4,5]向右轮转 3 步: [5,6,7,1,2,3,4]</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入：nums = [-1,-100,3,99], k = 2输出：[3,99,-1,-100]解释: 向右轮转 1 步: [99,-1,-100,3]向右轮转 2 步: [3,99,-1,-100]</code></pre><p><strong>提示：</strong></p><ul><li><p><code>1 &lt;= nums.length &lt;= 105</code></p></li><li><p><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></p></li><li><p><code>0 &lt;= k &lt;= 105</code></p></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        k <span class="token operator">%=</span> length<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先反转全部的元素</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在反转前k个元素</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接着反转剩余的</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>end<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yIcgP.png" alt="1-2运行结果" style="zoom:150%;"></li><li><p><strong><font color="rgba()">存在重复元素</font></strong></p><pre class=" language-text"><code class="language-text">给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入：nums = [1,2,3,1]输出：true</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入：nums = [1,2,3,4]输出：false</code></pre><p><strong>示例 3:</strong></p><pre class=" language-text"><code class="language-text">输入：nums = [1,1,1,3,3,4,3,2,4,2]输出：true</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> preIndex <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> current <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>current<span class="token operator">&lt;</span>array<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       array<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>       preIndex<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     array<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token operator">=</span>current<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null<span class="token operator">||</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yIdVb.png" alt="1-3运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>只出现一次的数字</strong></font></p><pre class=" language-t**ext"><code class="language-t**ext">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入: [2,2,1]输出: 1</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入: [4,1,2,1,2]输出: 4</code></pre><p><strong><strong><font color="#FFB800">源码:</font></strong></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null<span class="token operator">||</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> result <span class="token operator">^</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yIVol.png" alt="1-4运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>两个数组的交集 II</strong></font></p><pre class=" language-text"><code class="language-text">给你两个整数数组&nbsp;nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。</code></pre><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：nums1 = [1,2,2,1], nums2 = [2,2]输出：[2,2]</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出：[4,9]</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> len2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yIVol.png" alt="1-5运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>加一</strong></font>  </p><pre class=" language-text"><code class="language-text">给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。你可以假设除了整数 0 之外，这个整数不会以零开头。</code></pre><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：digits = [1,2,3]输出：[1,2,4]解释：输入数组表示数字 123。</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：digits = [4,3,2,1]输出：[4,3,2,2]解释：输入数组表示数字 4321。</code></pre><p><strong>示例 3：</strong></p><pre class=" language-text"><code class="language-text">输入：digits = [0]输出：[1]</code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= digits.length &lt;= 100</code></li><li><code>0 &lt;= digits[i] &lt;= 9</code></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> digits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> digits<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yIYrg.png" alt="1-6运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>移动零</strong></font>  </p><pre class=" language-text"><code class="language-text">给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。请注意 ，必须在不复制数组的情况下原地对数组进行操作。</code></pre><p><strong>示例 1:</strong></p><pre class=" language-text"><code class="language-text">输入: nums = [0,1,0,3,12]输出: [1,3,12,0,0]</code></pre><p><strong>示例 2:</strong></p><pre class=" language-text"><code class="language-text">输入: nums = [0]输出: [0]</code></pre><p><strong>提示</strong>:</p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> bubbleSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                bubbleSize<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bubbleSize<span class="token operator">!=</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>bubbleSize<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>len<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        nums<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yIfQB.png" alt="1-7运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>两数之和</strong></font>  </p><pre class=" language-text"><code class="language-text">给定一个整数数组 nums&nbsp;和一个整数目标值 target，请你在该数组中找出 和为目标值 target&nbsp; 的那&nbsp;两个&nbsp;整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</code></pre><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：nums = [2,7,11,15], target = 9输出：[0,1]解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：nums = [3,2,4], target = 6输出：[1,2]</code></pre><p><strong>示例 3：</strong></p><pre class=" language-text"><code class="language-text">输入：n输入：nums = [3,3], target = 6输出：[0,1]</code></pre><p><strong>提示：</strong></p><ul><li>2 &lt;= nums.length &lt;= 104</li><li>-109 &lt;= nums[i] &lt;= 109</li><li>-109 &lt;= target &lt;= 109</li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yIl3s.png" alt="1-8运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>有效的数独</strong></font>  </p><pre class=" language-text"><code class="language-text">请你判断一个&nbsp;9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。1）数字&nbsp;1-9&nbsp;在每一行只能出现一次。2）数字&nbsp;1-9&nbsp;在每一列只能出现一次。3）数字&nbsp;1-9&nbsp;在每一个以粗实线分隔的&nbsp;3x3&nbsp;宫内只能出现一次。（请参考示例图）</code></pre><p><strong>注意：</strong></p><ul><li>一个有效的数独（部分已被填充）不一定是可解的。</li><li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li><li>空白格用 <code>'.'</code> 表示。</li></ul><img src="https://i.imgtg.com/2022/09/19/yIjiK.png" alt="" style="zoom:150%;"><p><strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]输出：true</code></pre><p><strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：board = [["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]输出：false解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</code></pre><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> line <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> column <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认9x9</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所在宫格(计算机形式)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>column<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>cell<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span>column<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span>cell<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/19/yI24a.png" alt="1-9运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>旋转图像</strong></font></p><pre class=" language-text"><code class="language-text">给定一个 n&nbsp;×&nbsp;n 的二维矩阵&nbsp;matrix 表示一个图像。请你将图像顺时针旋转 90 度。你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像</code></pre><p>   <strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]输出：[[7,4,1],[8,5,2],[9,6,3]]</code></pre><p>   <strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</code></pre><p>   <strong>提示：</strong></p><ul><li>n == matrix.length == matrix[i].length</li><li>1 &lt;= n &lt;= 20</li><li>-1000 &lt;= matrix[i][j] &lt;= 1000</li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>     <span class="token keyword">int</span> middle <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>middle<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         matrix<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>   <img src="https://i.imgtg.com/2022/09/19/yI62S.png" alt="1-10运行结果" style="zoom:150%;"></li><li><p><font color="rgba()"><strong>买卖股票的最佳时机 II</strong></font></p><pre class=" language-text"><code class="language-text">给你一个整数数组 prices ，其中&nbsp;prices[i] 表示某支股票第 i 天的价格。在每一天，你可以决定是否购买和/或出售股票。你在任何时候&nbsp;最多&nbsp;只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。返回 你能获得的 最大 利润&nbsp;。</code></pre><p>   <strong>示例 1：</strong></p><pre class=" language-text"><code class="language-text">输入：prices = [7,1,5,3,6,4]输出：7解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。  随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。  总利润为 4 + 3 = 7 。</code></pre><p>   <strong>示例 2：</strong></p><pre class=" language-text"><code class="language-text">输入：prices = [1,2,3,4,5]输出：4解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。  总利润为 4 。</code></pre><p><strong>示例 3：</strong></p><pre class=" language-text"><code class="language-text">输入：prices = [7,6,4,3,1]输出：0解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。</code></pre><p>   <strong>提示：</strong></p><ul><li>n == matrix.length == matrix[i].length</li><li>1 &lt;= n &lt;= 20</li><li>-1000 &lt;= matrix[i][j] &lt;= 1000</li></ul><p><strong><font color="#FFB800">源码:</font></strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         total <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> total<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://i.imgtg.com/2022/09/25/gdRhl.png" alt="1-11运行结果" style="zoom:150%;"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口文档</title>
      <link href="/2022/09/08/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>/2022/09/08/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><table><thead><tr><th>功能名称</th><th>接口名</th><th>角色</th></tr></thead><tbody><tr><td>查询会议列表(分页)</td><td>/meeting/searchMyMeetingListByPage</td><td>ALL</td></tr><tr><td>查询成员列表</td><td>/meeting/searchUserGroupByDept</td><td>超级管理员,部门经理</td></tr><tr><td>创建工作流实例</td><td>/workflow/startMeetingProcess</td><td></td></tr><tr><td>添加会议</td><td>/meeting/insertMeeting</td><td>超级管理员,部门经理</td></tr><tr><td>根据ID查询会议</td><td>/meeting/searchMeetingById</td><td>超级管理员,部门经理</td></tr><tr><td>删除工作流实例</td><td>/workflow/startMeeting</td><td></td></tr><tr><td>根据ID删除会议</td><td>/meeting/deleteMeetingById</td><td>超级管理员,部门经理</td></tr><tr><td>查询审批人待审批工作流任务</td><td>/workflow/searchUserTaskListByPage</td><td></td></tr><tr><td>审批任务</td><td>/workflow/approvalMeeting</td><td></td></tr><tr><td>查询用户姓名和头像</td><td>/user/selectUserPhotoAndName</td><td>工作流:审批者</td></tr><tr><td>查询会议房间RoomID</td><td>/meeting/searchRoomIdByUUID</td><td></td></tr><tr><td>查询某月用户会议日期列表</td><td>/meeting/searchUserMeetingInMonth</td><td></td></tr><tr><td>添加角色</td><td>/role/insertRole</td><td>超级管理员,角色添加权限</td></tr><tr><td>修改角色</td><td>/role/updateRolePermissions</td><td></td></tr><tr><td>查询角色</td><td>/role/searchAllRole</td><td></td></tr><tr><td>根据ID删除角色</td><td>/role/deleteRoleById</td><td>超级管理员,角色添加权限</td></tr><tr><td>查询所有部门数据</td><td>/dept/searchAllDept</td><td></td></tr><tr><td>添加部门</td><td>/dept/insertDept</td><td>超级管理员,部门添加权限</td></tr><tr><td>删除部门</td><td>/dept/deleteDeptById</td><td>超级管理员,部门删除权限</td></tr><tr><td>更新部门</td><td>/dept/updateDeptById</td><td>超级管理员,部门修改权限</td></tr><tr><td>添加员工数据</td><td>/user/insertUser</td><td>超级管理员,管理员添加权限</td></tr><tr><td>查询员工数据</td><td>/user/searchUserInfo</td><td>超级管理员,管理员查询</td></tr><tr><td>查询用户信息</td><td>/user/searchUserSelfInfo</td><td>token</td></tr><tr><td>更新用户数据</td><td>/user/updateUserInfo</td><td>超级管理员,员工修改数据</td></tr><tr><td>删除员工记录</td><td>/user/deleteUserById</td><td>超级管理员,员工删除权限</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB之Shell Methods</title>
      <link href="/2022/06/09/MongoDB%E4%B9%8BShell%20Methods/"/>
      <url>/2022/06/09/MongoDB%E4%B9%8BShell%20Methods/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB之Shell-Methods"><a href="#MongoDB之Shell-Methods" class="headerlink" title="MongoDB之Shell Methods"></a>MongoDB之Shell Methods</h1><h4 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="method/db.collection.aggregate.html#db.collection.aggregate"><code>db.collection.aggregate()</code></a></td><td>Provides access to the <a href="../core/aggregation-pipeline.html">aggregation pipeline</a>.</td></tr><tr><td><a href="method/db.collection.bulkWrite.html#db.collection.bulkWrite"><code>db.collection.bulkWrite()</code></a></td><td>Provides bulk write operation functionality.</td></tr><tr><td><a href="method/db.collection.copyTo.html#db.collection.copyTo"><code>db.collection.copyTo()</code></a></td><td>Deprecated. Wraps <a href="command/eval.html#dbcmd.eval"><code>eval</code></a> to copy data between collections in a single MongoDB instance.</td></tr><tr><td><a href="method/db.collection.count.html#db.collection.count"><code>db.collection.count()</code></a></td><td>Wraps <a href="command/count.html#dbcmd.count"><code>count</code></a> to return a count of the number of documents in a collection or a view.</td></tr><tr><td><a href="method/db.collection.createIndex.html#db.collection.createIndex"><code>db.collection.createIndex()</code></a></td><td>Builds an index on a collection.</td></tr><tr><td><a href="method/db.collection.createIndexes.html#db.collection.createIndexes"><code>db.collection.createIndexes()</code></a></td><td>Builds one or more indexes on a collection.</td></tr><tr><td><a href="method/db.collection.dataSize.html#db.collection.dataSize"><code>db.collection.dataSize()</code></a></td><td>Returns the size of the collection. Wraps the <a href="command/collStats.html#collStats.size"><code>size</code></a> field in the output of the <a href="command/collStats.html#dbcmd.collStats"><code>collStats</code></a>.</td></tr><tr><td><a href="method/db.collection.deleteOne.html#db.collection.deleteOne"><code>db.collection.deleteOne()</code></a></td><td>Deletes a single document in a collection.</td></tr><tr><td><a href="method/db.collection.deleteMany.html#db.collection.deleteMany"><code>db.collection.deleteMany()</code></a></td><td>Deletes multiple documents in a collection.</td></tr><tr><td><a href="method/db.collection.distinct.html#db.collection.distinct"><code>db.collection.distinct()</code></a></td><td>Returns an array of documents that have distinct values for the specified field.</td></tr><tr><td><a href="method/db.collection.drop.html#db.collection.drop"><code>db.collection.drop()</code></a></td><td>Removes the specified collection from the database.</td></tr><tr><td><a href="method/db.collection.dropIndex.html#db.collection.dropIndex"><code>db.collection.dropIndex()</code></a></td><td>Removes a specified index on a collection.</td></tr><tr><td><a href="method/db.collection.dropIndexes.html#db.collection.dropIndexes"><code>db.collection.dropIndexes()</code></a></td><td>Removes all indexes on a collection.</td></tr><tr><td><a href="method/db.collection.ensureIndex.html#db.collection.ensureIndex"><code>db.collection.ensureIndex()</code></a></td><td>Deprecated. Use <a href="method/db.collection.createIndex.html#db.collection.createIndex"><code>db.collection.createIndex()</code></a>.</td></tr><tr><td><a href="method/db.collection.explain.html#db.collection.explain"><code>db.collection.explain()</code></a></td><td>Returns information on the query execution of various methods.</td></tr><tr><td><a href="method/db.collection.find.html#db.collection.find"><code>db.collection.find()</code></a></td><td>Performs a query on a collection or a view and returns a cursor object.</td></tr><tr><td><a href="method/db.collection.findAndModify.html#db.collection.findAndModify"><code>db.collection.findAndModify()</code></a></td><td>Atomically modifies and returns a single document.</td></tr><tr><td><a href="method/db.collection.findOne.html#db.collection.findOne"><code>db.collection.findOne()</code></a></td><td>Performs a query and returns a single document.</td></tr><tr><td><a href="method/db.collection.findOneAndDelete.html#db.collection.findOneAndDelete"><code>db.collection.findOneAndDelete()</code></a></td><td>Finds a single document and deletes it.</td></tr><tr><td><a href="method/db.collection.findOneAndReplace.html#db.collection.findOneAndReplace"><code>db.collection.findOneAndReplace()</code></a></td><td>Finds a single document and replaces it.</td></tr><tr><td><a href="method/db.collection.findOneAndUpdate.html#db.collection.findOneAndUpdate"><code>db.collection.findOneAndUpdate()</code></a></td><td>Finds a single document and updates it.</td></tr><tr><td><a href="method/db.collection.getIndexes.html#db.collection.getIndexes"><code>db.collection.getIndexes()</code></a></td><td>Returns an array of documents that describe the existing indexes on a collection.</td></tr><tr><td><a href="method/db.collection.getShardDistribution.html#db.collection.getShardDistribution"><code>db.collection.getShardDistribution()</code></a></td><td>For collections in sharded clusters, <a href="method/db.collection.getShardDistribution.html#db.collection.getShardDistribution"><code>db.collection.getShardDistribution()</code></a> reports data of <a href="glossary.html#term-chunk">chunk</a> distribution.</td></tr><tr><td><a href="method/db.collection.getShardVersion.html#db.collection.getShardVersion"><code>db.collection.getShardVersion()</code></a></td><td>Internal diagnostic method for sharded cluster.</td></tr><tr><td><a href="method/db.collection.group.html#db.collection.group"><code>db.collection.group()</code></a></td><td>Deprecated. Provides simple data aggregation function. Groups documents in a collection by a key, and processes the results. Use <a href="method/db.collection.aggregate.html#db.collection.aggregate"><code>aggregate()</code></a> for more complex data aggregation.</td></tr><tr><td><a href="method/db.collection.insert.html#db.collection.insert"><code>db.collection.insert()</code></a></td><td>Creates a new document in a collection.</td></tr><tr><td><a href="method/db.collection.insertOne.html#db.collection.insertOne"><code>db.collection.insertOne()</code></a></td><td>Inserts a new document in a collection.</td></tr><tr><td><a href="method/db.collection.insertMany.html#db.collection.insertMany"><code>db.collection.insertMany()</code></a></td><td>Inserts several new document in a collection.</td></tr><tr><td><a href="method/db.collection.isCapped.html#db.collection.isCapped"><code>db.collection.isCapped()</code></a></td><td>Reports if a collection is a <a href="glossary.html#term-capped-collection">capped collection</a>.</td></tr><tr><td><a href="method/db.collection.latencyStats.html#db.collection.latencyStats"><code>db.collection.latencyStats()</code></a></td><td>Returns latency statistics for a collection.</td></tr><tr><td><a href="method/db.collection.mapReduce.html#db.collection.mapReduce"><code>db.collection.mapReduce()</code></a></td><td>Performs map-reduce style data aggregation.</td></tr><tr><td><a href="method/db.collection.reIndex.html#db.collection.reIndex"><code>db.collection.reIndex()</code></a></td><td>Rebuilds all existing indexes on a collection.</td></tr><tr><td><a href="method/db.collection.remove.html#db.collection.remove"><code>db.collection.remove()</code></a></td><td>Deletes documents from a collection.</td></tr><tr><td><a href="method/db.collection.renameCollection.html#db.collection.renameCollection"><code>db.collection.renameCollection()</code></a></td><td>Changes the name of a collection.</td></tr><tr><td><a href="method/db.collection.replaceOne.html#db.collection.replaceOne"><code>db.collection.replaceOne()</code></a></td><td>Replaces a single document in a collection.</td></tr><tr><td><a href="method/db.collection.save.html#db.collection.save"><code>db.collection.save()</code></a></td><td>Provides a wrapper around an <a href="method/db.collection.insert.html#db.collection.insert"><code>insert()</code></a> and <a href="method/db.collection.update.html#db.collection.update"><code>update()</code></a> to insert new documents.</td></tr><tr><td><a href="method/db.collection.stats.html#db.collection.stats"><code>db.collection.stats()</code></a></td><td>Reports on the state of a collection. Provides a wrapper around the <a href="command/collStats.html#dbcmd.collStats"><code>collStats</code></a>.</td></tr><tr><td><a href="method/db.collection.storageSize.html#db.collection.storageSize"><code>db.collection.storageSize()</code></a></td><td>Reports the total size used by the collection in bytes. Provides a wrapper around the <a href="command/collStats.html#collStats.storageSize"><code>storageSize</code></a> field of the <a href="command/collStats.html#dbcmd.collStats"><code>collStats</code></a> output.</td></tr><tr><td><a href="method/db.collection.totalIndexSize.html#db.collection.totalIndexSize"><code>db.collection.totalIndexSize()</code></a></td><td>Reports the total size used by the indexes on a collection. Provides a wrapper around the <a href="command/collStats.html#collStats.totalIndexSize"><code>totalIndexSize</code></a> field of the <a href="command/collStats.html#dbcmd.collStats"><code>collStats</code></a> output.</td></tr><tr><td><a href="method/db.collection.totalSize.html#db.collection.totalSize"><code>db.collection.totalSize()</code></a></td><td>Reports the total size of a collection, including the size of all documents and all indexes on a collection.</td></tr><tr><td><a href="method/db.collection.update.html#db.collection.update"><code>db.collection.update()</code></a></td><td>Modifies a document in a collection.</td></tr><tr><td><a href="method/db.collection.updateOne.html#db.collection.updateOne"><code>db.collection.updateOne()</code></a></td><td>Modifies a single document in a collection.</td></tr><tr><td><a href="method/db.collection.updateMany.html#db.collection.updateMany"><code>db.collection.updateMany()</code></a></td><td>Modifies multiple documents in a collection.</td></tr><tr><td><a href="method/db.collection.validate.html#db.collection.validate"><code>db.collection.validate()</code></a></td><td>Performs diagnostic operations on a collection.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英文单词汇总</title>
      <link href="/2022/06/09/%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%E6%B1%87%E6%80%BB/"/>
      <url>/2022/06/09/%E8%8B%B1%E6%96%87%E5%8D%95%E8%AF%8D%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="英文单词汇总"><a href="#英文单词汇总" class="headerlink" title="英文单词汇总"></a>英文单词汇总</h1><p>感谢现在还愿意努力的自己,你可以犯错可以返回,可以跌倒,但是千万不要放弃,你有那么号的年纪,为什么不给自己<br>更多奋斗的可能?</p><table><thead><tr><th>单词</th><th>翻译</th></tr></thead><tbody><tr><td>Concern level</td><td>关注度</td></tr><tr><td>Majority</td><td>多数</td></tr><tr><td>Aggregate</td><td>并集</td></tr><tr><td>perspective</td><td>态度; 观点; 思考方法; 客观判断力; 权衡轻重的能力; 透视法; 景观;</td></tr><tr><td>non-local</td><td>非本地</td></tr><tr><td>non-exclusive</td><td>非排他</td></tr><tr><td>render</td><td>渲染</td></tr><tr><td>tutorial</td><td>教程</td></tr><tr><td>awesome</td><td>惊人的</td></tr><tr><td>sponsor</td><td>赞助商</td></tr><tr><td>prompted</td><td>提示</td></tr><tr><td>indices</td><td>指数</td></tr><tr><td>Notation</td><td>符号</td></tr><tr><td>manuals</td><td>手册</td></tr><tr><td>inspect</td><td>检查</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 英文学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB环境搭建</title>
      <link href="/2022/06/08/MongoDB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/06/08/MongoDB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB环境搭建"><a href="#MongoDB环境搭建" class="headerlink" title="MongoDB环境搭建"></a>MongoDB环境搭建</h1><p>环境：</p><p>CentOS 7</p><p>MongoDB 3.4.9</p><hr><h3 id="下载MongoDB"><a href="#下载MongoDB" class="headerlink" title="下载MongoDB"></a>下载MongoDB</h3><p>本次版本：<a href="https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.9.tgz">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.9.tgz</a></p><p>官网地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><h3 id="1-解压、创建目录"><a href="#1-解压、创建目录" class="headerlink" title="1.解压、创建目录"></a>1.解压、创建目录</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local#解压tar -zxvf mongodb-linux-x86_64-3.4.9cd mongodb/#创建目录mkdir dbmkdir logs</code></pre><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>进入/usr/local/bin目录下创建mongodb.conf文件。内容如下：</p><pre class=" language-shell"><code class="language-shell">dbpath=/usr/local/mongodb/dblogpath=/usr/local/mongodb/logs/mongodb.logport=27017fork=true#auth=false</code></pre><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p>配置完以上,启动MongoDB.执行服务端启动命令。如果日志打印 显示MongoDB的版本号,说明安装成功.</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/mongodb#启动命令./mongod -f /usr/local/mongodb/bin/mongodb.conf</code></pre><img src="https://i.imgtg.com/2022/06/08/1bxKX.png" alt="" style="zoom:100%;"><p>显示如下结果，说明启动成功</p><h3 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4.启动测试"></a>4.启动测试</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/mongodb/bin#连接数据库./mongoconnecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.9>switch admin</code></pre><img src="https://i.imgtg.com/2022/06/08/1bUpC.png" alt="" style="zoom:100%;"><p>以上MongoDB环境说明搭建成功！</p><h3 id="5-配置权限"><a href="#5-配置权限" class="headerlink" title="5.配置权限"></a>5.配置权限</h3><pre class=" language-text"><code class="language-text">目前数据库搭建需求: 1) 管理员账户 (创建数据库) 2) 数据库管理员账户(管理数据库、库函数执行、索引执行等) 3) 用户读/写账户 (数据库增删改查)</code></pre><p>详细权限参考如下:</p><table><thead><tr><th>角色名</th><th>权限功能</th></tr></thead><tbody><tr><td>Read</td><td>允许用户读取指定数据库</td></tr><tr><td>readWrite</td><td>允许用户读写指定数据库</td></tr><tr><td>dbAdmin</td><td>允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td></tr><tr><td>userAdmin</td><td>允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</td></tr><tr><td>clusterAdmin</td><td>只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</td></tr><tr><td>readAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的读权限</td></tr><tr><td>readWriteAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的读写权限</td></tr><tr><td>userAdminAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td></tr><tr><td>dbAdminAnyDatabase</td><td>只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</td></tr><tr><td>root</td><td>只在admin数据库中可用。超级账号，超级权限</td></tr></tbody></table><h5 id="1-配置超级管理员权限账号"><a href="#1-配置超级管理员权限账号" class="headerlink" title="1.配置超级管理员权限账号"></a>1.配置超级管理员权限账号</h5><p>将mongodb.conf里面的认证权限auth=false,改为true</p><pre class=" language-shell"><code class="language-shell">#新增账户use admindb.createUser({user:"admin",pwd:"admin",roles:[{role:"userAdminAnyDatabase",db:"admin"}]})#设置登陆需要权限vim /usr/local/mongodb/bin/mongodb.conf#将里面auth=false,改为true#关闭服务cd /usr/local/mongodb/bin#关闭服务./mongod --shutdown -f /usr/local/mongodb/bin/mongdb.conf#启动服务./mongod -f /usr/local/mongodb/bin/mongdb.conf#客户端链接./mongo #切换至admin库use admin#执行show logs,如果提示报错:#"errmsg" : "not authorized on admin to execute command { listDatabases: 1.0 }",##"code" : 13,#"codeName" : "Unauthorized" 则证明权限配置成功! 否则需要重新验证mongodb.conf配置文件是否修改成功,并重启mongodb服务#执行权限登陆db.auth('admin','admin') #返回内容</code></pre><img src="https://i.imgtg.com/2022/06/08/1bkBi.png" alt="" style="zoom:100%;"><p>显示如上内容则证明成功</p><h5 id="2-配置数据库管理员权限账号"><a href="#2-配置数据库管理员权限账号" class="headerlink" title="2.配置数据库管理员权限账号"></a>2.配置数据库管理员权限账号</h5><pre class=" language-shell"><code class="language-shell">#新增账户数据库管理员 emosuse emosdb.createUser({user:"emos_admin",pwd:"emos_admin",roles:[{role:"dbAdmin",db:"emos"}]})#关闭服务./mongod --shutdown -f /usr/local/mongodb/bin/mongdb.conf#启动服务./mongod -f /usr/local/mongodb/bin/mongdb.conf#客户端连接./mongo #切换至emos库use emos#指定用户连接数据库,执行结果返回1,代表连接成功db.auth('emos_admin','emos_admin')</code></pre><h5 id="3-配置用户权限账号"><a href="#3-配置用户权限账号" class="headerlink" title="3.配置用户权限账号"></a>3.配置用户权限账号</h5><pre class=" language-shell"><code class="language-shell">#新增账户use admindb.createUser({user:"emos_user",pwd:"user123",roles:[{role:"userAdminAnyDatabase",db:"admin"}]})#设置登陆需要权限vim /usr/local/mongodb/bin/mongodb.conf#将里面auth=false,改为true#关闭服务cd /usr/local/mongodb/bin#配置权限./mongod --shutdown -f /usr/local/mongodb/bin/mongdb.conf#启动服务./mongod -f /usr/local/mongodb/bin/mongdb.conf#客户端连接./mongo #切换至emos库use emos#指定用户连接数据库,执行结果返回1,代表连接成功db.auth('emos_user','user123')</code></pre><h5 id="4-防火墙端口开通"><a href="#4-防火墙端口开通" class="headerlink" title="4.防火墙端口开通"></a>4.防火墙端口开通</h5><p>本人搭建MongoDB是在百度云的轻量应用服务器上,本身这个服务器是默认关闭防火墙和没有安全组。可以不需要如下配置,即可在本地访问目标ip的端口</p><pre class=" language-shell"><code class="language-shell">#查看防火墙systemctl status firewalld.service#关闭防火墙systemctl stop firewalld.service#开启防火墙systemctl start firewalld.service#设置制定端口开墙 firewall-cmd --zone=public --add-port=80/tcp --permanent</code></pre><p>以上,方便自己，方便他人 thx ~~</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-popu弹出层引入编译报错</title>
      <link href="/2022/06/01/uni-popu%E5%BC%B9%E5%87%BA%E5%B1%82%E5%BC%95%E5%85%A5%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99/"/>
      <url>/2022/06/01/uni-popu%E5%BC%B9%E5%87%BA%E5%B1%82%E5%BC%95%E5%85%A5%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>uni-app官方文档有问题，编译一直报错</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> uniPopup <span class="token keyword">from</span> <span class="token string">'@/components/uni-popup/uni-popup.vue'</span></code></pre><p>但是,这个引入会报如下的错误</p><pre class=" language-js"><code class="language-js">Error<span class="token punctuation">:</span> Module build failed <span class="token punctuation">(</span><span class="token keyword">from</span> @<span class="token operator">/</span>components<span class="token operator">/</span>uni<span class="token operator">-</span>popup<span class="token operator">/</span>uni<span class="token operator">-</span>popup<span class="token punctuation">.</span>vue<span class="token punctuation">)</span>SyntaxError<span class="token punctuation">:</span> Indentifier <span class="token string">'uniPopup'</span> has already been <span class="token function">declared</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span></code></pre><p>经仔细查看文档,发现uni-app官方文档和其github上面的文档ß(<a href="https://github.com/dcloudio/uni-ui)%E3%80%82">https://github.com/dcloudio/uni-ui)。</a></p><table><thead><tr><th>组件名</th><th>组件列表</th></tr></thead><tbody><tr><td>uni-badge</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-badge">数字角标</a></td></tr><tr><td>uni-breadcrumb</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-breadcrumb">undefined</a></td></tr><tr><td>uni-calendar</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-calendar">日历</a></td></tr><tr><td>uni-card</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-card">卡片</a></td></tr><tr><td>uni-collapse</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-collapse">折叠面板</a></td></tr><tr><td>uni-combox</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-combox">组合框</a></td></tr><tr><td>uni-countdown</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-countdown">倒计时</a></td></tr><tr><td>uni-data-checkbox</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-data-checkbox">数据选择器</a></td></tr><tr><td>uni-data-picker</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-data-picker">数据驱动的picker选择器</a></td></tr><tr><td>uni-data-select</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-data-select">下拉框选择器</a></td></tr><tr><td>uni-dateformat</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-dateformat">日期格式化</a></td></tr><tr><td>uni-datetime-picker</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-datetime-picker">日期选择器</a></td></tr><tr><td>uni-drawer</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-drawer">抽屉</a></td></tr><tr><td>uni-easyinput</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-easyinput">增强输入框</a></td></tr><tr><td>uni-fab</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-fab">悬浮按钮</a></td></tr><tr><td>uni-fav</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-fav">收藏按钮</a></td></tr><tr><td>uni-file-picker</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-file-picker">文件选择上传</a></td></tr><tr><td>uni-forms</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-forms">表单</a></td></tr><tr><td>uni-goods-nav</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-goods-nav">商品导航</a></td></tr><tr><td>uni-grid</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-grid">宫格</a></td></tr><tr><td>uni-group</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-group">分组</a></td></tr><tr><td>uni-icons</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-icons">图标</a></td></tr><tr><td>uni-indexed-list</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-indexed-list">索引列表</a></td></tr><tr><td>uni-link</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-link">超链接</a></td></tr><tr><td>uni-list</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-list">列表</a></td></tr><tr><td>uni-load-more</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-load-more">加载更多</a></td></tr><tr><td>uni-nav-bar</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-nav-bar">自定义导航栏</a></td></tr><tr><td>uni-notice-bar</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-notice-bar">通告栏</a></td></tr><tr><td>uni-number-box</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-number-box">数字输入框</a></td></tr><tr><td>uni-pagination</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-pagination">分页器</a></td></tr><tr><td>uni-popup</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-popup">弹出层</a></td></tr><tr><td>uni-rate</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-rate">评分</a></td></tr><tr><td>uni-row</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-row">布局-行</a></td></tr><tr><td>uni-scss</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-scss">辅助样式</a></td></tr><tr><td>uni-search-bar</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-search-bar">搜索栏</a></td></tr><tr><td>uni-segmented-control</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-segmented-control">分段器</a></td></tr><tr><td>uni-steps</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-steps">步骤条</a></td></tr><tr><td>uni-swipe-action</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-swipe-action">滑动操作</a></td></tr><tr><td>uni-swiper-dot</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-swiper-dot">轮播图指示点</a></td></tr><tr><td>uni-table</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-table">表格</a></td></tr><tr><td>uni-tag</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-tag">标签</a></td></tr><tr><td>uni-title</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-title">章节标题</a></td></tr><tr><td>uni-tooltip</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-tooltip">undefined</a></td></tr><tr><td>uni-transition</td><td><a href="https://ext.dcloud.net.cn/plugin?name=uni-transition">过渡动画</a></td></tr></tbody></table><p>引入功能,这种引入方式编译通过.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> uniPopup <span class="token keyword">from</span> <span class="token string">'@dcloudio/uni-ui/lib/uni-badge/uni-badge.vue'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人的精力是有限的</title>
      <link href="/2022/05/12/%E5%85%B3%E4%BA%8E%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86%E6%88%91%E6%83%B3%E8%AF%B4/"/>
      <url>/2022/05/12/%E5%85%B3%E4%BA%8E%E7%B2%BE%E5%8A%9B%E7%AE%A1%E7%90%86%E6%88%91%E6%83%B3%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="不吐不快"><a href="#不吐不快" class="headerlink" title="不吐不快"></a>不吐不快</h2><h3 id="我的精力只勉强于工作"><a href="#我的精力只勉强于工作" class="headerlink" title="我的精力只勉强于工作"></a>我的精力只勉强于工作</h3><pre class=" language-wiki"><code class="language-wiki">  大多数上班都是属于被动上班,因为工作每天都会做那些事,没有多少新鲜和挑战.当然，稍微有挑战性的工作,咱也做不来.可是,我总觉得在下班之余做一点工作还是可以的.不知道你们有没有这样的感受.到了晚上,我们会有想要继续“加班”,做点事情.可是当我们想要做这样的事情,总会被一些工作相关or朋友开黑邀请or自己一工作就犯困的这几种情况导致我们放弃了今晚进步.   但是,说来也搞笑.反正我是有这样的心理,如果晚上没继续学习,我会觉得自己今天这么过有点亏;如果计划没有完成,我会有一种沮丧和失落感;如果打游戏和看电影,那就证明今天晚上有点混日子了.  噗哈哈哈,很奇葩但也很正常的心理现象</code></pre><h2 id="说点自己感受"><a href="#说点自己感受" class="headerlink" title="说点自己感受"></a>说点自己感受</h2><h3 id="尽量避免被打断"><a href="#尽量避免被打断" class="headerlink" title="尽量避免被打断"></a>尽量避免被打断</h3><pre class=" language-wiki"><code class="language-wiki">  其实,仔细想想为何我们平时的工作效率不高？一方面可能是自己的计划有问题,另一方面是我们在专注一件事情很容易被打断.在上班族的日常生活中,我认为后者出现的几率会更改.那么如何做到我们在工作和生活红避免被过多的interrupt的?1.工作场景  1) 原定的每周任务需要计划好,并且想好如何做?至少,要把能完成的任务,在公司要求的时间     内完成(可以有缓存or摸鱼时间)^_^  2) 加班分情况法则      ① 1h-2h内时间完成,按部就班即可      ② 3h+,兄弟先吃饭,这不重要了,估计领导想要你做好今天12点不能回家的准备了.        这个时候先吃饭,其他的都不重要<span class="token punctuation">!!</span><span class="token punctuation">!</span><span class="token punctuation">!</span><span class="token punctuation">!</span><span class="token punctuation">!</span>2.生活场景  1) 周末想要在家打卡提升,但是会被家人或朋友打断,导致我们的计划会被延误     这种情况,需要在周五提前和你的家人或好朋友提前知晓你是否再他们的周六周末计划中.  2) 和朋友约需要提前,以免延误后面的工作计划3.通用场景  1) 工作日,我会用手机,除此之外,我会讲手机甩在一边,可是如果有很重要的事情,没有及时收到回复怎么办?     因为我有Apple Watch所以,我的手表可以保证我下班后五个小时,都能通过的手表接受电话和微信  2) 周末也一样,拒绝手机  3) 如果周一到周天,在没有公司任务的情况下且在9点-11点不能专注打卡提升的话,建议运动0.5h+看书0.3h+早睡    9点睡觉,早晨3点起来,工作一个半小时.</code></pre><h3 id="来波鸡汤兄弟萌"><a href="#来波鸡汤兄弟萌" class="headerlink" title="来波鸡汤兄弟萌"></a>来波鸡汤兄弟萌</h3><pre class=" language-wiki"><code class="language-wiki">  试想一下,如果你想升职加薪,你是否需要拥有更多的技能(硬实力和软实力).现在,我想和极客朋友们聊聊硬实力的问题.如果我们下班后,除了吃饭、睡觉、打豆豆,那我们怎么在年轻的时候迅速将自己在人群中脱颖而出,还不是需要花时间.总不能天天靠脑袋想吧,如果你的底子好,那只能说明,你过去很努力且很成功.  如果,你的工作岗位一直在消耗你的过去能力和资源,先不说升职加薪了,不出两年就要被取代.不是因为公司把你辞去,是因为新的职员把你顶替.哈哈哈 </code></pre><h3 id="完美永不存在"><a href="#完美永不存在" class="headerlink" title="完美永不存在"></a>完美永不存在</h3><pre class=" language-wiki"><code class="language-wiki">  兄弟萌,如果以上你都能够做到的话,已经超越98%的人了.没完成也没关系,你已经很优秀了^_^</code></pre>]]></content>
      
      
      <categories>
          
          <category> 我想说点啥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 来点真金白银 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序</title>
      <link href="/2022/05/12/%E7%AE%97%E6%B3%95-%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/05/12/%E7%AE%97%E6%B3%95-%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="十大经典排序"><a href="#十大经典排序" class="headerlink" title="十大经典排序"></a>十大经典排序</h1><ol><li><p><font color="rgba"><strong>冒泡排序</strong></font></p><p>eg：数组[22, 34, 3, 32, 82, 55, 89, 50, 37, 5, 64, 35, 9, 70]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li><li><p><strong><font color="rgba()">选择排序</font></strong></p><p>eg:数组[22, 34, 3, 32, 82, 55, 89, 50, 37, 5, 64, 35, 9, 70]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> index<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本次排序最小值</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        index <span class="token operator">=</span> j<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><strong><font color="rgba()">插入排序</font></strong></p><p>eg:数组[22, 34, 3, 32, 82, 55, 89, 50, 37, 5, 64, 35, 9, 70]</p><p>第一次：[<font color="red">22</font> , <font color="red">34 </font>, 3 , 32  , 82 , 55 , 89 , 50 , 37 , 5 , 64 , 35 , 9 , 70]<br>第二次：[<font color="red">3</font> , <font color="red">22 </font>, <font color="red">34 </font>, 32  , 82 , 55 , 89 , 50 , 37 , 5 , 64 , 35 , 9 , 70]</p><p>第三次：[<font color="red">3</font> , <font color="red">22</font> , <font color="red">32</font> , <font color="red">34 </font> , 82 , 55 , 89 , 50 , 37 , 5 , 64 , 35 , 9 , 70]</p><p>第四次：[<font color="red">3</font> , <font color="red">22</font> , <font color="red">32</font> , <font color="red">34  </font>, <font color="red">82</font> , 55 , 89 , 50 , 37 , 5 , 64 , 35 , 9 , 70]</p><p>第五次：[<font color="red">3</font> , <font color="red">22</font> , <font color="red">32</font> , <font color="red">34  </font>, <font color="red">55</font> , <font color="red">82</font>  , 89 , 50 , 37 , 5 , 64 , 35 , 9 , 70]</p><p>第六次：[<font color="red">3</font> , <font color="red">22</font> , <font color="red">32</font> , <font color="red">34  </font>, <font color="red">55</font> , <font color="red">82</font>  , <font color="red">89</font> , 50 , 37 , 5 , 64 , 35 , 9 , 70]</p><p>第七次：[<font color="red">3</font> , <font color="red">22</font> , <font color="red">32</font> , <font color="red">34  </font>, <font color="red">50</font> , <font color="red">55</font> , <font color="red">82</font>  , <font color="red">89</font>  , 37 , 5 , 64 , 35 , 9 , 70]</p><p>….以此类推</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> preIndex <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> current <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>current<span class="token operator">&lt;</span>array<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       array<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>       preIndex<span class="token operator">--</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     array<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token operator">=</span>current<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>4.<font color="rgba()"><strong>希尔排序</strong></font></p><p>初始数据如下：</p><img src="https://i.imgtg.com/2022/05/12/zlxOS.png" alt="" style="zoom:100%;"><p>运行流程图如下：</p><img src="https://i.imgtg.com/2022/05/12/zlFLC.png" alt="" style="zoom:100%;"><img src="https://i.imgtg.com/2022/05/12/zlhuL.png" alt="" style="zoom:100%;"><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> gap<span class="token operator">=</span>array<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>gap<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>gap<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>gap<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//使用插入排序算法</span>      <span class="token keyword">int</span> preIndex <span class="token operator">=</span> j<span class="token operator">-</span>gap<span class="token punctuation">;</span>      <span class="token keyword">int</span> current <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>preIndex<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">&lt;</span>array<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        array<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>       preIndex<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      array<span class="token punctuation">[</span>preIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.<font color="rgba()"><strong>归并排序</strong></font>    </p><p>   归并排序，就是通过折半法不断的拆分数组，然后，在从拆分的数组进行合并。原理图如下:</p><img src="https://i.imgtg.com/2022/05/12/zl1PX.png" alt="" style="zoom:100%;"><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result<span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>begin<span class="token operator">>=</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>result<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 合并序列,使其有序 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> p1<span class="token operator">=</span>begin<span class="token punctuation">;</span>  <span class="token keyword">int</span> p2<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//比较p1、p2序列里面数值</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> p2<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">>=</span>arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当左侧序列P1经过排序,完全填充在temp数组中时，右侧序列P2会存在一些数组未填充</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>    temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当右侧序列P2经过排序,完全填充在temp数组中时，右侧序列P1会存在一些数组未填充</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>    temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将本轮已排序序列，放入数组中</span>  p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>begin<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>begin<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.<font color="rgba()"><strong>快速排序</strong></font>  </p><p>  快速排序采用分治法进行排序。原理图待补充~</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>begin<span class="token operator">></span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> key<span class="token operator">=</span>arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token operator">=</span>begin<span class="token punctuation">;</span>  <span class="token keyword">int</span> j<span class="token operator">=</span>end<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>begin<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//右侧哨兵开始与key值比较，如果大于则跳过</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>key <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//左侧哨兵开始与key值比较,如果小于key值则跳过</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>key <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>begin<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7.<font color="rgba()"><strong>堆排序</strong></font>  </p>]]></content>
      
      
      <categories>
          
          <category> 算法趣多多 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Linux环境搭建MySQL</title>
      <link href="/2022/01/28/%E5%9F%BA%E4%BA%8ELinux%E6%90%AD%E5%BB%BAMySQL/"/>
      <url>/2022/01/28/%E5%9F%BA%E4%BA%8ELinux%E6%90%AD%E5%BB%BAMySQL/</url>
      
        <content type="html"><![CDATA[<p>安装依赖环境</p><pre class=" language-copy"><code class="language-copy">#下载mysql镜像wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm#安装镜像rpm -ivh mysql-community-release-el7-5.noarch.rpm#安装mysql-serveryum install mysql-server</code></pre><p>命令测试</p><pre class=" language-copy"><code class="language-copy">#启动服务，若无法报错提示信息，则启动成功systemctl start mysqld.service#查看服务启动状态systemctl status mysqld.service#连接MySQL,默认无密码，直接连接进去，如果成功，则证明MySQL服务搭建成功mysql -uroot</code></pre><p>配置权限(远程可访问)</p><pre class=" language-copy"><code class="language-copy">#修改数据库用户密码mysql>update User set password=PASSWORD('lizichen') where User='root' and Host='localhost';#修改数据库访问权限为所有用户皆可访问mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;#刷新数据库配置缓存mysql>FLUSH PRIVILEGES;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RaspberryPi通过VNC连接成功后显示cannot currentlly  show the view</title>
      <link href="/2021/08/29/RaspberryPi%E9%80%9A%E8%BF%87VNC%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F%E5%90%8E%E6%98%BE%E7%A4%BAcannot%20currentlly%20%20show%20the%20view/"/>
      <url>/2021/08/29/RaspberryPi%E9%80%9A%E8%BF%87VNC%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F%E5%90%8E%E6%98%BE%E7%A4%BAcannot%20currentlly%20%20show%20the%20view/</url>
      
        <content type="html"><![CDATA[<p><del>网上的文章存在略微的误差，我做了一点更新</del>。树莓派版本不一样，里面的配置菜单不一样,<br>我的是3B+</p><pre class=" language-shell"><code class="language-shell">sudo raspi-config</code></pre><img src="https://i.imgtg.com/2022/05/13/z9HbX.png" alt="" style="zoom:100%;"><img src="https://i.imgtg.com/2022/05/13/z9Lmt.png" alt="" style="zoom:100%;"><img src="https://i.imgtg.com/2022/05/13/z9EYx.png" alt="" style="zoom:100%;">]]></content>
      
      
      <categories>
          
          <category> Raspberry PI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建之添加emoji表情</title>
      <link href="/2021/08/24/%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85%E6%94%AF%E6%8C%81/"/>
      <url>/2021/08/24/%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<p>本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）转变成会跳跃的emoji表情，安装命令如下：</p><pre class=" language-copy"><code class="language-copy">npm install hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项:</p><pre class=" language-copy"><code class="language-copy">npm install hexo-filter-github-emojis --save</code></pre><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后就可以在文章中对应位置看到你用emoji语法写的表情了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建之添加emoji表情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS服务器搭建</title>
      <link href="/2021/08/24/FastDFS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/08/24/FastDFS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>FastDFS</strong> 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。官网地址：<a href="https://github.com/happyfish100/fastdfs">https://github.com/happyfish100/fastdfs</a></p><p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p><p>　　<strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p><p>　　<strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p><p>　　<strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p><h2 id="二、搭建过程"><a href="#二、搭建过程" class="headerlink" title="二、搭建过程"></a>二、搭建过程</h2><p>软件下载（均为GitHub地址）：</p><p><a href="https://github.com/happyfish100/libfastcommon/releases">libfastcommon</a> | fastsds的库文件，需要先编译安装好</p><p><a href="https://github.com/happyfish100/fastdfs/releases">fastdfs</a> | fastsds主文件</p><p><a href="https://github.com/happyfish100/fastdfs-nginx-module/releases">fastdfs-nginx-module</a> | fastdfs的nginx模块模块</p><p>此次实验均使用最新版本：<code>libfastcommon-1.0.43.tar.gz</code>、<code>fastdfs-6.06.tar.gz</code>、<code>fastdfs-nginx-module-1.22.tar.gz</code></p><h3 id="1、单机版"><a href="#1、单机版" class="headerlink" title="1、单机版"></a>1、单机版</h3><h4 id="1-1、环境准备"><a href="#1-1、环境准备" class="headerlink" title="1.1、环境准备"></a>1.1、环境准备</h4><p>准备一台虚拟机，ip是：<code>192.168.255.101</code> 系统环境：CentOS Linux release 7.6.1810</p><h4 id="1-2、依赖环境安装"><a href="#1-2、依赖环境安装" class="headerlink" title="1.2、依赖环境安装"></a>1.2、依赖环境安装</h4><blockquote><p>依赖环境安装提前安装，少走弯路！！！</p></blockquote><p><code>gcc</code>、<code>g++</code> 基础环境</p><pre class=" language-shell"><code class="language-shell"># yum -y install -y gcc gcc-c++</code></pre><p><code>perl</code> 编译环境</p><pre class=" language-shell"><code class="language-shell"># yum -y install perl</code></pre><p><code>vim</code> 编辑软件，方便修改配置文件</p><pre class=" language-shell"><code class="language-shell"># yum -y install vim</code></pre><p><code>wget</code> 下载软件</p><pre class=" language-shell"><code class="language-shell"># yum -y install wget</code></pre><h4 id="1-3、FastDFS安装"><a href="#1-3、FastDFS安装" class="headerlink" title="1.3、FastDFS安装"></a>1.3、FastDFS安装</h4><h5 id="1-3-1、libfastcommon-安装"><a href="#1-3-1、libfastcommon-安装" class="headerlink" title="1.3.1、libfastcommon 安装"></a>1.3.1、libfastcommon 安装</h5><p><code>libfastcommon</code>是从<code>FastDFS</code>和<code>FastDHT</code>中提取出来的公共C函数库，<code>FastDFS</code>依赖该模块，需要首先安装它。</p><pre class=" language-shell"><code class="language-shell">解压缩并进入解压缩后的文件夹的根目录：# tar zxvf libfastcommon-1.0.43.tar.gz && cd libfastcommon-1.0.43执行编译安装：# ./make.sh && ./make.sh install</code></pre><p>安装完成后，返回到上一级目录（软件包所在的根目录）</p><h5 id="1-3-2、fastdfs-安装"><a href="#1-3-2、fastdfs-安装" class="headerlink" title="1.3.2、fastdfs 安装"></a>1.3.2、fastdfs 安装</h5><pre class=" language-shell"><code class="language-shell">解压缩并进入解压缩后的文件夹的根目录：# tar zxvf fastdfs-6.06.tar.gz && cd fastdfs-6.06执行编译安装：# ./make.sh && ./make.sh install</code></pre><p>报错：<a href="https://github.com/happyfish100/fastdfs/issues/392%EF%BC%8C%E5%90%8C%E6%A0%B7%E9%97%AE%E9%A2%98%EF%BC%8C%E5%88%A0%E9%99%A4%E5%8E%9F%E7%8E%AF%E5%A2%83%EF%BC%8C%E9%87%8D%E6%96%B0%E6%9D%A5%E4%B8%80%E9%81%8D%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%98%AF%E7%94%B1%E4%BA%8E%E6%88%91%E5%AE%89%E8%A3%85%E4%BA%86%E4%B9%8B%E5%89%8D%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E3%80%82">https://github.com/happyfish100/fastdfs/issues/392，同样问题，删除原环境，重新来一遍，可能是由于我安装了之前版本导致。</a></p><p>安装成功后，在系统<code>/etc</code>路径下会生成一个<code>/fdfs</code>目录，该目录下是<code>FastDFS</code>相关的一些示例配置文件内容。</p><pre class=" language-shell"><code class="language-shell">[root@localhost fastdfs-6.06]#  ll /etc/fdfs/总用量 32-rw-r--r--. 1 root root  1909 6月   4 22:53 client.conf.sample-rw-r--r--. 1 root root 10246 6月   4 22:53 storage.conf.sample-rw-r--r--. 1 root root   620 6月   4 22:53 storage_ids.conf.sample-rw-r--r--. 1 root root  9138 6月   4 22:53 tracker.conf.sample</code></pre><ul><li><h5 id="tracker-配置"><a href="#tracker-配置" class="headerlink" title="tracker 配置"></a>tracker 配置</h5></li></ul><pre class=" language-shell"><code class="language-shell">将/etc/fdfs/tracker.conf.sample重命名为/etc/fdfs/tracker.conf并编辑它：# mv /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf && vim /etc/fdfs/tracker.conf修改配置：# the base path to store data and log filesbase_path=/home/tyron/fastdfs/tracker创建对应文件夹：# mkdir -p /home/tyron/fastdfs/tracker复制配置文件cp /opt/fastdfs/fastdfs-6.06/conf/http.conf /etc/fdfs/http.confcp /opt/fastdfs/fastdfs-6.06/conf/mime.types /etc/fdfs/mime.types</code></pre><ul><li><h5 id="storage-配置"><a href="#storage-配置" class="headerlink" title="storage 配置"></a>storage 配置</h5></li></ul><pre class=" language-shell"><code class="language-shell">将/etc/fdfs/storage.conf.sample 重命名为/etc/fdfs/storage.conf 并编辑它：# mv /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf && vim /etc/fdfs/storage.conf找到`base_path`的配置行，将其修改为：base_path=/home/tyron/fastdfs/storage找到`store_path0`的配置行，将其修改为：store_path0=/home/tyron/fastdfs/storage找到`tracker_server`的配置行，将其修改为`tracker`服务器的地址：tracker_server=192.168.255.101:22122创建对应文件夹：# mkdir -p /home/tyron/fastdfs/storage</code></pre><blockquote><p><code>store_path0</code>如果配置的路径不存在，则会使用<code>base_path</code>配置的路径。</p></blockquote><ul><li><h5 id="启动tracker-和-storage"><a href="#启动tracker-和-storage" class="headerlink" title="启动tracker 和 storage"></a>启动<code>tracker</code> 和 <code>storage</code></h5></li></ul><pre class=" language-shell"><code class="language-shell">service fdfs_trackerd startservice fdfs_storaged start# 如果上面执行不成功/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start/usr/bin/fdfs_storaged /etc/fdfs/storage.conf start# 查看进程状态ps -aux | grep fdfs</code></pre><img src="https://i.imgtg.com/2022/05/13/z9Qqj.png" alt="启动信息" style="zoom:100%;"><p>显示：storage启动正常，tracker无法启动</p><p>查看日志信息：</p><pre class=" language-shell"><code class="language-shell"># cat /home/tyron/fastdfs/tracker/logs/trackerd.log/usr/bin/fdfs_trackerd: symbol lookup error: /usr/bin/fdfs_trackerd: undefined symbol: int2str</code></pre><p>软链接有问题，参考解决方式：<a href="https://blog.csdn.net/Mabanana/article/details/88076465">https://blog.csdn.net/Mabanana/article/details/88076465</a></p><img src="https://i.imgtg.com/2022/05/13/z9SAp.png" alt="tracker无法启动" style="zoom:100%;"><p>正常启动页面，至此成功一半了！！！</p><img src="https://i.imgtg.com/2022/05/13/z90SU.png" alt="启动正常" style="zoom:100%;"><ul><li><h5 id="client-配置，测试是否安装成功"><a href="#client-配置，测试是否安装成功" class="headerlink" title="client 配置，测试是否安装成功"></a>client 配置，测试是否安装成功</h5></li></ul><pre class=" language-shell"><code class="language-shell">将 `/etc/fdfs/client.conf.sample` 重命名为 `/etc/fdfs/client.conf` 并编辑它：mv /etc/fdfs/client.conf.sample /etc/fdfs/client.conf && vim /etc/fdfs/client.conf找到 `base_path`的配置行，将其修改为：base_path=/home/tyron/fastdfs/storage找到 `tracker_server`的配置行，将其修改为tracker服务器的地址：tracker_server=192.168.255.101:22122</code></pre><blockquote><p>这里的base_path是storage用于存储数据文件（其路径为：base_path/data）以及日志文件（其路径为：base_path/logs）的基路径。</p></blockquote><ul><li><h5 id="上传文件测试"><a href="#上传文件测试" class="headerlink" title="上传文件测试"></a>上传文件测试</h5></li></ul><pre class=" language-shell"><code class="language-shell">#fdfs_upload_file /etc/fdfs/client.conf 上传的图片#栗子 1.jpg为自己上传的图片# fdfs_upload_file /etc/fdfs/client.conf /opt/fastdfs/1.jpggroup2/M00/00/00/wKj_ZV7cvXmARAiNAAKnQDcoJRc029.jpg</code></pre><p>如果返回类似的文件id则说明文件上传成功！</p><h5 id="1-3-3、fastdfs-nginx-module-安装"><a href="#1-3-3、fastdfs-nginx-module-安装" class="headerlink" title="1.3.3、fastdfs-nginx-module 安装"></a>1.3.3、fastdfs-nginx-module 安装</h5><pre class=" language-shell"><code class="language-shell">解压缩并进入解压缩后的文件夹的根目录：# tar zxvf fastdfs-nginx-module-1.22.tar.gz && cd fastdfs-nginx-module-1.22编辑src/mod_fastdfs.conf：# vim src/mod_fastdfs.conf#tracker_server=tracker:22122tracker_server=192.168.255.101:22122group_name改成与storage一样的名字# the group name of the local storage servergroup_name=group2找到 `url_have_group_name` 的配置行，将其改为：url_have_group_name = true找到 `store_path0` 的配置行，将其改为：store_path0=/home/tyron/fastdfs/storage复制文件 `src/mod_fastdfs.conf` 到 `/etc/fdfs/` 目录下：cp src/mod_fastdfs.conf /etc/fdfs/编辑 `src/config` ：# vim src/config找到 `CORE_INCS` 的配置行：CORE_INCS="$CORE_INCS /usr/local/include"去掉路径中的 `/local` ，改为如下并保存退出：CORE_INCS="$CORE_INCS /usr/include/"</code></pre><blockquote><p>如果请求的url地址中包含了group_name（如“group1/M00/00/00/xxx”）则应设为true。 如果请求的url地址中<br>不包含 group_name（如“/M00/00/00/xxx”）则应设为false。<br>必须配置与本机 <code>storage.conf</code> 中配置的 <code>store_path0</code> 路径相同。</p></blockquote><h5 id="1-3-4、安装Nginx（线上）"><a href="#1-3-4、安装Nginx（线上）" class="headerlink" title="1.3.4、安装Nginx（线上）"></a>1.3.4、安装Nginx（线上）</h5><pre class=" language-shell"><code class="language-shell">一键安装依赖# yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel 创建一个文件夹# mkdir -p /usr/local/nginx  && cd /usr/local/nginx下载tar包# wget http://nginx.org/download/nginx-1.16.1.tar.gz解压# tar -xvf nginx-1.16.1.tar.gz编译nginx，并安装# cd /usr/local/nginx/nginx-1.16.1# ./configure --prefix=/usr/local/nginx --add-module=/opt/fastdfs/fastdfs-nginx-module-1.22/src && make && make install验证是否安装成功# /usr/local/nginx/sbin/nginx -vnginx version: nginx/1.16.1验证本地可访问# curl http://192.168.255.101</code></pre><p>出现版本信息，即表示Nginx安装成功！</p><pre class=" language-shell"><code class="language-shell">修改Nginx配置# vim /usr/local/nginx/conf/nginx.conf配置信息如下：server {    listen 80;    server_name 192.168.255.101;    location /group2/M00 {        #root /home/tyron/fastdfs/storage/data/;        ngx_fastdfs_module;    }    error_page  500 502 503 504 /50x.html;    location = /50x.html {        root  html;    }}启动Nginx# /usr/local/nginx/sbin/nginxngx_http_fastdfs_set pid=43651指定配置文件启动nginx/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf指定配置文件重启nginx/usr/local/nginx/sbin/nginx -s reload -c /usr/local/nginx/conf/nginx.conf</code></pre><p>如果请求的url地址中包含了group_name（如“group1/M00/00/00/xxx”）则应设为true。 如果请求的url地址中不包含group_name（如“/M00/00/00/xxx”）则应设为false。</p><h4 id="1-4-Centos7关闭防火墙方法（详解）"><a href="#1-4-Centos7关闭防火墙方法（详解）" class="headerlink" title="1.4 Centos7关闭防火墙方法（详解）"></a>1.4 Centos7关闭防火墙方法（详解）</h4><pre class=" language-shell"><code class="language-shell">centos7中的防火墙改成了firewall，使用iptables无作用，开放端口的方法如下： firewall-cmd --zone=public --add-port=80/tcp --permanent 命令含义：  --zone #作用域  --add-port=80/tcp #添加端口，格式为：端口/通讯协议  --permanent #永久生效 systemctl restart firewalld.service  #重启防火墙 systemctl stop firewalld.service #关闭防火墙 netstat -lntp #查看监听(Listen)的端口 netstat -lnp|grep 80 #检查端口被哪个进程占用</code></pre><p>同理本机电脑（Windows）也关闭防火墙！！！</p><h2 id="三、最后成果"><a href="#三、最后成果" class="headerlink" title="三、最后成果"></a>三、最后成果</h2><p>最后访问：<a href="http://192.168.255.101/group2/M00/00/00/wKj_ZV7cvXmARAiNAAKnQDcoJRc029.jpg">http://192.168.255.101/group2/M00/00/00/wKj_ZV7cvXmARAiNAAKnQDcoJRc029.jpg</a></p><img src="https://i.imgtg.com/2022/05/13/z9cCY.png" alt="fdfs上传" style="zoom:100%;"><blockquote><p>以上功能在局域网中，只需设置指定端口或关闭防火墙。</p><p>如果需要使用云服务器，则需要，将IP全部改为公网IP,并且所有涉及通信端口，需要配置安全组(防火墙)。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/chiangchou/p/fastdfs.html">用FastDFS一步步搭建文件管理系统</a></li><li><a href="https://www.cnblogs.com/cnmenglang/p/6731209.html">FastDFS集群部署</a></li><li><a href="https://fanlychie.github.io/post/fastdfs-setup.html">FastDFS分布式文件系统搭建</a></li><li><a href="https://blog.csdn.net/qq_37495786/article/details/84330699">FastDFS 文件上传成功，访问404</a> – 排除问题，思路清晰</li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/23/hello-world/"/>
      <url>/2021/08/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! <span class="github-emoji"><span>😋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-copy"><code class="language-copy">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-copy"><code class="language-copy">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-copy"><code class="language-copy">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-copy"><code class="language-copy">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 我的第一次 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
